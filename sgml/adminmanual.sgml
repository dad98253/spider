<!doctype linuxdoc system>

<article>

<!-- Title information -->

<title>The DXSpider Administration Manual v1.50</title> 
<author>Ian Maude, G0VGS, (g0vgs@gb7mbc.net), and
Charlie Carroll, K1XX, (k1xx@ptcnh.net)</author>
<date>March 2003 revision 0.5</date>

<abstract>
A reference for SysOps of the DXSpider DXCluster program.
</abstract>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->

<sect>Routing and Filtering

<sect1>Introduction

<P>
From DXSpider version 1.48, major changes were introduced to the way 
node connections are treated.  This is part of an ongoing process to
remove problems with loops and to enable talk and other functions to
propagate across the whole of the worldwide cluster network.  In fact,
in a Spider network, it would be useful, perhaps even necessary to
have loops.  This would give real resilience to the network, meaning
that if a link dropped, the information flow would simply come in and
go out via a different route.  Of course, we do not have a complete
network of Spider nodes, there are other programs out there.  Some of
these do not have any protection from loops.  Certainly AK1A does not 
handle loops well at all.  It is therefore necessary to have some form 
of protection for these nodes.

<P>
In fact DXSpider has had a simple system for some time which is called
<it>isolation</it>. This is similar to what in other systems such as 
<bf>clx</bf>, is called <it>passive mode</it>. A more detailed explanation
of <it>isolation</it> is given further below. This system is still available
and, for simple networks, is probably all that you need.

<P>
The new functionality introduced in version 1.48 allows filtering the node
and user protocol frames on a "per interface" basis. We call this
<it>route filtering</it>. This is used <bf>instead of</bf>
<it>isolation</it>. 

<p>
What this really means is that you can control more or less completely
which user and node management PC protocol frames pass to each of your 
partner nodes. You can also limit what comes into your node from your 
partners. It is even possible to control the settings that your partner 
node has for the routing information that it sends to you 
(using the <it>rcmd</it> command).

<sect1>Route Filters

<p>
Initially when route filters were being tested we generated a
"default" filter.  Unfortunately it quickly became apparent that this
might suit the UK cluster network but didn't really fit anybody else.
However using a default filter is an appropriate thing to do. How, is
explained further on.

<p>
The first thing that you must do is determine whether you need to use 
route filtering <bf>at all</bf>. If you are a "normal" node with two or 
three partners and you arranged in an "official" non-looping tree type 
network, then <bf>you do not need to do route filtering</bf> and you will 
feel a lot better for not getting involved. If you are successfully using 
<it>isolation</it> then you also probably don't need to use route filtering.

<p>
To put it simply, you should not mix Isolation and Route Filtering.  It 
will work, of sorts, but you will not get the expected results.  If you 
are using Isolation sucessfully at the moment, do not get involved in 
Route Filtering unless you have a good supply of aspirin!  Once you have 
started down the road of Route Filtering, do not use Isolation either.
Use one or the other, not both.

<p>
You will only require this functionality if you are "well-connected". What 
that means is that you are connected to several different parts of (say) 
the EU cluster and, at the same time, also connected to two or three places 
in the US which, in turn are connected back to the EU. This is called a 
"loop" and if you are seriously looped then you need filtering.

<P>
I should at this stage give a little bit of background on filters.  All
the filters in Spider work in basically the same way.  You can either
accept or reject various options in order to create the filter rules
you wish to achieve.  Some filters are user settable, others can only
be altered by the sysop.  Route filtering can only be done by the sysop.

<P> 
Anyway, without further discouragement, let me start the process
of explanation.

<sect1>The node_default filter

<P>
All normal systems should have a default routing filter and it should
usually be set to send only the normal, unlooped, view of your
"national" network.  Here in the UK that means nodes from the UK and
Eire, in EU it is more complex as the networks there grew up in a more
intertwined way.

<p> 
The generic commands are:-

<tscreen><verb>
reject/route node_default &lt;filter_option&gt;

or

accept/route node_default &lt;filter_option&gt;
</verb></tscreen>

where filter_option is one of the following ...

<tscreen><verb>
call &lt;prefixes&gt;
call_dxcc &lt;numbers&gt;
call_itu &lt;numbers&gt;
call_zone &lt;numbers&gt;
channel &lt;prefixes&gt;
channel_dxcc &lt;numbers&gt;
channel_itu &lt;numbers&gt;
channel_zone &lt;numbers&gt;
</verb></tscreen>

Please be careful if you alter this setting, it will affect 
<bf><it>ALL</it></bf> your links!  Remember, this is a <it>default</it>
filter for node connections, not a <it>per link</it> default.

<p>
For the default routing filter then you have two real choices: either
a "national" view or the "safe" option of only your own
callsign. Examples of each (for my node: GB7DJK) are:-

<tscreen><verb>
acc/route node_default call_dxcc 61,38
acc/route node_default call gb7djk
</verb></tscreen>

GB7DJK uses the first of these. The DXCC countries can be obtained from the 
<it>show/prefix</it> command.

<p>
The example filters shown control <it>output</it> <bf>TO</bf> all your
partner nodes unless they have a specific filter applied to them (see
next section).

<p>
It is also possible to control the <it>incoming</it> routing
information that you are prepared to accept <bf>FROM</bf> your partner
nodes. The reason this is necessary is to make sure that stuff like
mail, pings and similar commands a) go down the correct links and b)
don't loop around excessively. Again using GB7DJK as an example a typical
default input filter would be something like:

<tscreen><verb>
rej/route node_default input call_dxcc 61,38 and not channel_dxcc 61,38
</verb></tscreen>

What this does is accept node and user information for our national
network from nodes that are in our national network, but rejects such
information from anyone else. Although it doesn't explicitly say so,
by implication, any other node information (not from the UK and Eire)
is accepted.

<p>
As I imagine it will take a little while to get one's head around all of 
this you can study the effect of any rules that you try by watching the 
debug output after having done:-

<tscreen><verb>
set/debug filter
</verb></tscreen>

After you have got tired of that, to put it back the way it was:-

<tscreen><verb>
unset/debug filter
</verb></tscreen>

<sect1>General route filtering

<P>
Exactly the same rules apply for general route filtering.  You would
use either an accept filter or a reject filter like this ...

<tscreen><verb>
reject/route &lt;node_call&gt; &lt;filter_option&gt;

or

accept/route &lt;node_call&gt; &lt;filter_option&gt; 
</verb></tscreen>

<P>
Here are some examples of route filters ...

<tscreen><verb>
rej/route gb7djk call_dxcc 61,38 (send everything except UK+EIRE nodes)
rej/route all                    (equiv to [very] restricted mode)
acc/route gb7djk call_dxcc 61,38 (send only UK+EIRE nodes)
acc/route gb7djk call gb7djk     (equiv to SET/ISOLATE)
</verb></tscreen>

In practice you will either be opening the default filter out for a
partner by defining a specific filter for that callsign:-
 
<tscreen><verb>
acc/route gb7baa all
acc/route gb7baa input all
</verb></tscreen>

or restricting it quite a lot, in fact making it very nearly like an 
<it>isolated</it> node, like this:-

<tscreen><verb>
acc/route pi4ehv-8 call gb7djk
rej/route pi4ehv-8 input call_dxcc 61,38 
</verb></tscreen>

This last example takes everything except UK and Eire from PI4EHV-8
but only sends him my local configuration (just a PC19 for GB7DJK and
PC16s for my local users).

<p>
It is possible to write <bf>much</bf> more complex rules, there are up 
to 10 accept/reject pairs per callsign per filter. For more information 
see the next section. 


<sect1>General filter rules

<P>
Upto v1.44 it was not possible for the user to set their own filters.  From 
v1.45 though that has all changed.  It is now possible to set filters for just 
about anything you wish.  If you have just updated from an older version of 
DXSpider you will need to update your new filters.  You do not need to do 
anything with your old filters, they will be renamed as you update.

<P>
There are 3 basic commands involved in setting and manipulating filters.  These 
are <em>accept</em>, <em>reject</em> and <em>clear</em>.  First we will look
generally at filtering. There are a number of things you can filter in the 
DXSpider system. They all use the same general mechanism.

<P>
In general terms you can create a "reject" or an "accept" filter which can have 
up to 10 lines in it. You do this using, for example ... 

<tscreen><verb> 
accept/spots .....
reject/spots .....
</verb></tscreen>

where ..... are the specific commands for that type of filter. There are filters 
for spots, wwv, announce, wcy and (for sysops) connects. See each different 
accept or reject command reference for more details.

There is also a command to clear out one or more lines in a filter. They are ...

<tscreen><verb>
clear/spots 1
clear/spots all
</verb></tscreen>

There is clear/xxxx command for each type of filter.

<P>
and you can check that your filters have worked by the command ... 

<tscreen><verb>  
show/filter
</verb></tscreen>

<P>
For now we are going to use spots for the examples, but you can apply the same
principles to all types of filter.

<sect1>Types of filter

<P>
There are two main types of filter, <em>accept</em> or <em>reject</em>.  You 
can use either to achieve the result you want dependent on your own preference 
and which is more simple to do.  It is pointless writing 8 lines of reject 
filters when 1 accept filter would do the same thing!  Each filter has 10 
lines (of any length) which are tried in order.  If a line matches then the 
action you have specified is taken (ie reject means ignore it and accept 
means take it)

<P>
If you specify reject filters, then any lines that arrive that match the filter 
will be dumped but all else will be accepted.  If you use an accept filter, 
then ONLY the lines in the filter will be accepted and all else will be dumped.
For example if you have a single line <em>accept</em> filter ...

<tscreen><verb>
accept/spots on vhf and (by_zone 14,15,16 or call_zone 14,15,16)
</verb></tscreen>

then you will <em>ONLY</em> get VHF spots <em>from</em> or <em>to</em> CQ zones 
14, 15 and 16.

<P>
If you set a reject filter like this ...

<tscreen><verb>
reject/spots on hf/cw
</verb></tscreen>

Then you will get everything <em>EXCEPT</em> HF CW spots.  You could make this 
single filter even more flexible.  For example, if you are interested in IOTA 
and will work it even on CW even though normally you are not interested in 
CW, then you could say ...

<tscreen><verb>
reject/spots on hf/cw and not info iota
</verb></tscreen>

But in that case you might only be interested in iota and say:-

<tscreen><verb>
accept/spots not on hf/cw or info iota
</verb></tscreen>

which achieves exactly the same thing. You should choose one or the other 
until you are comfortable with the way it works. You can mix them if you 
wish (actually you can have an accept AND a reject on the same line) but 
don't attempt this until you are sure you know what you are doing!

<P>
You can arrange your filter lines into logical units, either for your own
understanding or simply convenience. Here is an example ...

<tscreen><verb>
reject/spots 1 on hf/cw
reject/spots 2 on 50000/1400000 not (by_zone 14,15,16 or call_zone 14,15,16)  
</verb></tscreen>

What this does is to ignore all HF CW spots and also rejects any spots on VHF 
which don't either originate or spot someone in Europe. 

<P>
This is an example where you would use a line number (1 and 2 in this case), if 
you leave the digit out, the system assumes '1'. Digits '0'-'9' are available.  
This make it easier to see just what filters you have set.  It also makes it 
more simple to remove individual filters, during a contest for example.

<P>
You will notice in the above example that the second line has brackets.  Look 
at the line logically.  You can see there are 2 separate sections to it.  We 
are saying reject spots that are VHF or above <em>APART</em> from those in 
zones 14, 15 and 16 (either spotted there or originated there).  If you did 
not have the brackets to separate the 2 sections, then Spider would read it 
logically from the front and see a different expression entirely ...

<tscreen><verb>
(on 50000/1400000 and by_zone 14,15,16) or call_zone 14,15,16 
</verb></tscreen>

The simple way to remember this is, if you use OR - use brackets. Whilst we are 
here CASE is not important. 'And BY_Zone' is just the same as 'and by_zone'.

As mentioned earlier, setting several filters can be more flexible than 
simply setting one complex one.  Doing it in this way means that if you want 
to alter your filter you can just redefine or remove one or more lines of it or 
one line. For example ...

<tscreen><verb>
reject/spots 1 on hf/ssb
</verb></tscreen>

would redefine our earlier example, or 

<tscreen><verb>
clear/spots 1
</verb></tscreen>

To remove all the filter lines in the spot filter ...

<tscreen><verb>
clear/spots all
</verb></tscreen>

<sect1>Filter options

<P>
You can filter in several different ways.  The options are listed in the
various helpfiles for accept, reject and filter.

<sect1>Default filters

<P>
Sometimes all that is needed is a general rule for node connects.  This can
be done with a node_default filter.  This rule will always be followed, even
if the link is isolated, unless another filter is set specifically.  Default
rules can be set for nodes and users.  They can be set for spots, announces,
WWV and WCY.  They can also be used for hops.  An example might look like 
this ...

<tscreen><verb>
accept/spot node_default by_zone 14,15,16,20,33
set/hops node_default spot 50
</verb></tscreen>

This filter is for spots only, you could set others for announce, WWV and WCY.
This filter would work for ALL nodes unless a specific filter is written to 
override it for a particular node.  You can also set a user_default should
you require.  It is important to note that default filters should be
considered to be "connected".  By this I mean that should you override the
default filter for spots, you need to add a rule for the hops for spots also.

<sect1>Advanced filtering

<P>
Once you are happy with the results you get, you may like to experiment. 

<P>
The previous example that filters hf/cw spots and accepts vhf/uhf spots from EU 
can be written with a mixed filter, for example ... 

<tscreen><verb>
rej/spot on hf/cw
acc/spot on 0/30000
acc/spot 2 on 50000/1400000 and (by_zone 14,15,16 or call_zone 14,15,16)
</verb></tscreen>

Note that the first filter has not been specified with a number.  This will 
automatically be assumed to be number 1.  In this case, we have said <em>reject all
HF spots in the CW section of the bands but accept all others at HF.  Also
accept anything in VHF and above spotted in or by operators in the zones
14, 15 and 16</em>.  Each filter slot actually has a 'reject' slot and 
an 'accept' slot. The reject slot is executed BEFORE the accept slot.

<P>
It was mentioned earlier that after a reject test that doesn't match, the default 
for following tests is 'accept', the reverse is true for 'accept'. In the example 
what happens is that the reject is executed first, any non hf/cw spot is passed 
to the accept line, which lets through everything else on HF.  The next filter line 
lets through just VHF/UHF spots from EU.

<sect1>Basic hop control

<P>
In /spider/data you will find a file called hop_table.pl.  This is the file 
that controls your hop count settings.  It has a set of default hops on the 
various PC frames and also a set for each node you want to alter the hops for.  
You may be happy with the default settings of course, but this powerful tool 
can help to protect and improve the network.  The file will look something 
like this ...

<tscreen><verb>
# 
# hop table construction
# 

package DXProt;

# default hopcount to use
$def_hopcount = 5;

# some variable hop counts based on message type
%hopcount = 
(
 11 => 10,
 16 => 10,
 17 => 10,
 19 => 10,
 21 => 10,
);


# the per node hop control thingy


%nodehops = 
(
 GB7ADX => {            11 => 8,
                        12 => 8,
                        16 => 8,
                        17 => 8,
                        19 => 8,
                        21 => 8,
                   },

 GB7UDX => {            11 => 8,
                        12 => 8,
                        16 => 8,
                        17 => 8,
                        19 => 8,
                        21 => 8,
                   },
 GB7BAA => {
                        11 => 5,
                        12 => 8,
                        16 => 8,
                        17 => 8,
                        19 => 8,
                        21 => 8,
                   },
);
</verb></tscreen>

<P>
Each set of hops is contained within a pair of curly braces and contains a 
series of PC frame types.  PC11 for example is a DX spot. The figures here 
are not exhaustive but should give you a good idea of how the file works.

<P>
SHould any of the nodecalls include an ssid, it is important to wrap the
whole call in single quotes, like this ...

<tscreen><verb>
 'DB0FHF-15' => {
                        11 => 5,
                        12 => 8,
                        16 => 8,
                        17 => 8,
                        19 => 8,
                        21 => 8,
                   },
</verb></tscreen>

If you do not do this, you will get errors and the file will not work as
expected.

<P>
You can alter this file at any time, including whilst the cluster is running.  
If you alter the file during runtime, the command <em>load/hops</em> will 
bring your changes into effect.

<sect1>Hop Control on Specific Nodes

<p>You can set a callsign specific hop count for any of the standard filter
options so:-

<tscreen><verb>
set/hops gb7djk spot 4
set/hops node_default route 10
set/hops gb7baa wcy 5
</verb></tscreen>
 
all work on their specific area of the protocol.

<p>
The <em>set/hops</em> command overrides any hops that you have set otherwise.

<p>
You can show what hops have been set using the <em>show/hops</em> command.

<sect1>Isolating networks

<P>
It is possible to isolate networks from each other on a "gateway" node using the
 <em>set/isolate &lt;node_call&gt;</em> command.
	
<P>
The effect of this is to partition an isolated network completely from another 
node connected to your node. Your node will appear on and otherwise behave 
normally on every network to which you are connected, but data from an isolated 
network will not cross onto any other network or vice versa. However all the 
spot, announce and WWV traffic and personal messages will still be handled 
locally (because you are a real node on all connected networks), that is locally
connected users will appear on all networks and will be able to access and 
receive information from all networks transparently.  All routed messages will 
be sent as normal, so if a user on one network knows that you are a gateway for 
another network, he can still still send a talk/announce etc message via your 
node and it will be routed across.

<P>
If you use isolate on a node connection you will continue to receive
all information from the isolated partner, however you will not pass
any information back to the isolated node.  There are times when you
would like to forward only spots across a link (maybe during a contest
for example).  To do this, isolate the node in the normal way and use
an <em>acc/spot &gt;call&lt; all</em> filter to override the isolate. 

<sect>Other filters

<sect1>Filtering Mail

<P>
In the /spider/msg directory you will find a file called badmsg.pl.issue.  Rename
this to badmsg.pl and edit the file.  The original looks something like this ....

<tscreen><verb>

# the list of regexes for messages that we won't store having
# received them (bear in mind that we must receive them fully before
# we can bin them)


# The format of each line is as follows

#     type      source             pattern 
#     P/B/F     T/F/O/S            regex  

# type: P - private, B - bulletin (msg), F - file (ak1a bull)
# source: T - to field, F - from field,  O - origin, S - subject 
# pattern: a perl regex on the field requested

# Currently only type B and P msgs are affected by this code.
# 
# The list is read from the top down, the first pattern that matches
# causes the action to be taken.

# The pattern can be undef or 0 in which case it will always be selected
# for the action specified



package DXMsg;

@badmsg = (
'B',    'T',    'SALE', 
'B',    'T',    'WANTED',
'B',    'S',    'WANTED',
'B',    'S',    'SALE', 
'B',    'S',    'WTB',
'B',    'S',    'WTS',
'B',    'T',    'FS',
);
</verb></tscreen>

<P>
I think this is fairly self explanatory.  It is simply a list of subject 
headers that we do not want to pass on to either the users of the cluster or 
the other cluster nodes that we are linked to.  This is usually because of 
rules and regulations pertaining to items for sale etc in a particular country.


<sect1>Filtering words from text fields in Announce, Talk and DX spots

<p>
From version 1.48 onwards the interface to this has changed. You can now
use the commands <em>set/badword</em> to add words that you are not prepared
to see on the cluster, <em>unset/badword</em> to allow that word again and 
<em>show/badword</em> to list the words that you have set.

<p>
If you have a previous <em>/spider/data/badwords</em>, the first time you start
the node, it will read and convert this file to the new commands. The old style
file will then be removed.

<sect1>Stopping (possibly bad) DX Spots from Nodes or Spotters

<p> 
There are a number of commands that control whether a spot progresses
any further by regarding it as "bad" in some way.

<p>
A DX Spot has a number of fields which can be checked to see whether they
contain "bad" values, they are: the DX callsign itself, the Spotter and
the Originating Node.

<p>
There are a set of commands which allow the sysop to control whether a
spot continues:-

<tscreen><verb>
set/baddx
set/badspotter
set/badnode
</verb></tscreen>

These work in the same as the <em>set/badword</em> command, you can add
any words or callsigns or whatever to the appropriate database. For
example, to stop a spot from a particular node you do:

<tscreen><verb>
set/badnode gb7djk gb7dxc
</verb></tscreen>

a bad spotter:

<tscreen><verb>
set/badspotter b0mb p1rat nocall
</verb></tscreen>

and some bad dx:

<tscreen><verb>
set/baddx video wsjt
</verb></tscreen>

You can remove a word using the appropriate unset command
(<em>unset/baddx, unset/badspotter, unset/badnode</em>) or list them
using one of <em>show/baddx, show/badspotter</em> and
<em>show/badnode</em>.

<sect>Mail

<P>
DXSpider deals seamlessly with standard AK1A type mail.  It supports both
personal and bulletin mail and the sysop has additional commands to ensure
that mail gets to where it is meant.  DXSpider will send mail almost
immediately, assuming that the target is on line.  However, only one
mail message is dealt with at any one time.  If a mail message is already
being sent or recieved, then the new message will be queued until it has
finished.

The cluster mail is automatically deleted after 30 days unless the sysop
sets the "keep" flag using the <em>msg</em> command.

<sect1>Personal mail

<P>
Personal mail is sent using the <em>sp</em> command.  This is actually the
default method of sending mail and so a simple <em>s</em> for send will do.
A full list of the send commands and options is in the <em>command set</em>
section, so I will not duplicate them here.

<sect1>Bulletin mail

<P>
Bulletin mail is sent by using the <em>sb</em> command.  This is one of the
most common mistakes users make when sending mail.  They send a bulletin
mail with <em>s</em> or <em>sp</em> instead of <em>sb</em> and of course
the message never leaves the cluster.  This can be rectified by the sysop
by using the <em>msg</em> command.

<P>Bulletin addresses can be set using the Forward.pl file.

<sect1>Forward.pl

<P>
DXSpider receives all and any mail sent to it without any alterations needed
in files.  Because personal and bulletin mail are treated differently, there
is no need for a list of accepted bulletin addresses.  It is necessary, however,
to tell the program which links accept which bulletins.  For example, it is
pointless sending bulletins addresses to "UK" to any links other than UK
ones.  The file that does this is called forward.pl and lives in /spider/msg.
At default, like other spider files it is named forward.pl.issue.  Rename it
to forward.pl and edit the file to match your requirements.
The format is below ...

<tscreen><verb>
#
# this is an example message forwarding file for the system
#
# The format of each line is as follows
#
#     type    to/from/at pattern action  destinations
#     P/B/F     T/F/A     regex   I/F    [ call [, call ...] ]
#
# type: P - private, B - bulletin (msg), F - file (ak1a bull)
# to/from/at: T - to field, F - from field, A - home bbs, O - origin 
# pattern: a perl regex on the field requested
# action: I - ignore, F - forward
# destinations: a reference to an array containing node callsigns
#
# if it is non-private and isn't in here then it won't get forwarded 
#
# Currently only type B msgs are affected by this code.
# 
# The list is read from the top down, the first pattern that matches
# causes the action to be taken.
#
# The pattern can be undef or 0 in which case it will always be selected
# for the action specified
#
# If the BBS list is undef or 0 and the action is 'F' (and it matches the
# pattern) then it will always be forwarded to every node that doesn't have 
# it (I strongly recommend you don't use this unless you REALLY mean it, if
# you allow a new link with this on EVERY bull will be forwarded immediately
# on first connection)
#

package DXMsg;

@forward = (
'B',    'T',    'LOCAL',        'F',    [ qw(GB7MBC) ],
'B',    'T',    'ALL',          'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'UK',           'F',    [ qw(GB7BAA GB7ADX) ],
'B',    'T',    'QSL',          'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'QSLINF',       'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'DX',           'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'DXINFO',       'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'DXNEWS',       'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'DXQSL',        'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'SYSOP',        'F',    [ qw(GB7BAA GB7ADX) ],
'B',    'T',    '50MHZ',        'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
);
</verb></tscreen>

Simply insert a bulletin address and state in the brackets where you wish
that mail to go.  For example, you can see here that mail sent to "UK" will
only be sent to the UK links and not to PA4AB-14.

<P>
To force the cluster to reread the file use load/forward

<P>
NB: If a user tries to send mail to a bulletin address that does not exist
in this file, they will get an error.

<sect1>The msg command

<P>
The <em>msg</em> command is a very powerful and flexible tool for the
sysop.  It allows the sysop to alter to and from fields and make other
changes to manage the cluster mail.

Here is a full list of the various options ...

<tscreen><verb>
  MSG TO <msgno> <call>     - change TO callsign to <call>
  MSG FRom <msgno> <call>   - change FROM callsign to <call>
  MSG PRrivate <msgno>      - set private flag
  MSG NOPRrivate <msgno>    - unset private flag
  MSG RR <msgno>            - set RR flag
  MSG NORR <msgno>          - unset RR flag
  MSG KEep <msgno>          - set the keep flag (message won't be deleted ever)
  MSG NOKEep <msgno>        - unset the keep flag
  MSG SUbject <msgno> <new> - change the subject to <new>
  MSG WAittime <msgno>      - remove any waiting time for this message
  MSG NOREad <msgno>        - mark message as unread
  MSG REad <msgno>          - mark message as read
  MSG QUeue                 - queue any outstanding bulletins
  MSG QUeue 1               - queue any outstanding private messages
</verb></tscreen>

These commands are simply typed from within the cluster as the sysop user.

<sect1>Message status

<P>
You can check on a message from within the cluster by using the command
<em>stat/msg</em>.  This will give you additional information on the
message number including which nodes have received it, which node it
was received from and when etc.  Here is an example of the output of
the command ...

<tscreen><verb>
G0VGS de GB7MBC 28-Jan-2001 1308Z >
stat/msg 6869
        From: GB7DJK
    Msg Time: 26-Jan-2001 1302Z
       Msgno: 6869
      Origin: GB7DJK
        Size: 8012
     Subject: AMSAT 2line KEPS 01025.AMSAT
          To: UK
Got it Nodes: GB7BAA, GB7ADX
     Private: 0
Read Confirm: 0
  Times read: 0
G0VGS de GB7MBC 28-Jan-2001 1308Z >
</verb></tscreen>

<sect1>Filtering mail

<P>
This is described in the section on <em>Other filters</em> so I will not
duplicate it here.

<sect1>Distribution lists

<P>
Distribution lists are simply a list of users to send certain types of
mail to.  An example of this is mail you only wish to send to other
sysops.  In /spider/msg there is a directory called <em>distro</em>.  You
put any distibution lists in here.  For example, here is a file called
SYSOP.pl that caters for the UK sysops.

<tscreen><verb>
qw(GB7TLH GB7DJK GB7DXM GB7CDX GB7BPQ GB7DXN GB7MBC GB7MBC-6 GB7MDX
   GB7NDX GB7SDX GB7TDX GB7UDX GB7YDX GB7ADX GB7BAA GB7DXA GB7DXH 
   GB7DXK GB7DXI GB7DXS)
</verb></tscreen>

Any mail sent to "sysop" would only be sent to the callsigns in this list.

<sect1>BBS interface

<P>
Spider provides a simple BBS interface.  No input is required from the sysop
of the cluster at all.  The BBS simply sets the cluster as a BBS and pushes
any required mail to the cluster.  No mail can flow from Spider to the BBS,
the interface is one-way.

<P>
Please be careful not to flood the cluster network with unnecessary mail.
Make sure you only send mail to the clusters that want it by using the
Forward.pl file very carefully.

<sect>Scripts

<p>
From 1.48 onwards it will become increasingly possible to control DXSpider's
operation with scripts of various kinds.

<P>
The directory /spider/scripts is where it all happens and is used for several 
things.  Firstly it contains a file called startup that can be used to call 
in any changes to the cluster from the default settings on startup.  This
script is executed immediately after all initialisation of the node is done
but before any connections are possible.  Examples of this include how many 
spots it is possible to get with the sh/dx command, whether you want 
registration/passwords to be permanently on etc.  An example file is shown 
below and is included in the distribution as startup.issue.

<tscreen><verb>
#
# startup script example
#
# set maximum no of spots allowed to 100
# set/var $Spot::maxspots = 100
#
# Set registration on
# set/var $main::reqreg = 1
#
# Set passwords on
# set/var $main::passwdreq = 1
#
</verb></tscreen>

<P>
As usual, any text behind a # is treated as a comment and not read.  To use
this file, simply rename it from startup.issue to startup.  In our example
above there are three options.  The first option is the amount of spots that
a user can request with the <em>sh/dx</em> command.  Normally the default is
to give 10 spots unless the user specifies more.  Without this line enabled,
the maximum a user can request is 100 spots.  Depending on your link quality
you may wish to enable more or less by specifying the number.

<P>
The other 2 options are dealt with more fully in the security section.

<P>
Secondly, it is used to store the login scripts for users and nodes.  Currently
this can only be done by the sysop but it is envisaged that eventually users will 
be able to set their own.  An example is included in the distibution but here is 
a further example.

<tscreen><verb>
#
# G0FYD
#
blank +
sh/wwv 3
blank +
sh/dx 
blank +
t g0jhc You abt?
blank +
</verb></tscreen>

The lines in between commands can simply insert a blank line or a character
such as a + sign to make the output easier to read.  Simply create this script
with your favourite editor and save it with the callsign of the user as the
filename.  Filenames should always be in lower case.

<P>
Commands can be inserted in the same way for nodes.  A node may wish a series
of commands to be issued on login, such as a merge command for example.

<P>
Thirdly, there are 2 default scripts for users and nodes who do not have a
specifically defined script.  These are <em>user_default</em> and
<em>node_default</em>

<sect>Databases

<P>
Spider allows the creation of local or remote databases.  It supports
chained databases, allowing several different databases to be scanned
with one simple command.  Importing of databases is limited at present
to the standard AK1A databases such as OBLAST and the DB0SDX QSL 
database but will expand with time.

<sect1>Creating databases

<P>
Creating a database could not be more simple.  All the commands are
sent from the cluster prompt as the <em>sysop</em> user.

To create a database you use the command <em>dbcreate</em>.  It can
be used in 3 different ways like so ..

<tscreen><verb>
dbcreate <name>
</verb></tscreen>

To simply create a database locally, you just tell the command the
name of the database.  This does not create the actual database, it
simply defines it to say that it exists.

<tscreen><verb>
dbcreate <name> chain <name> [<name>...]
</verb></tscreen>

This creates a chained database entry.  The first database will be
scanned, then the second, the third etc...

<tscreen><verb>
dbcreate <name> remote <name>
</verb></tscreen>

This creates a remote entry.  the first name field is the database
name at the remote node, then the remote switch, then the actual
node_call of the remote node, for example...

<tscreen><verb>
dbcreate buckmaster remote gb7dxc
</verb></tscreen>

Remote databases cannot be chained, however, the last database in a
chain can be a remote database.

<sect1>Importing databases

<P>
The only databases that Spider can currently import are the standard
AK1A databases such as OBLAST or the DB0SDX qsl and address database.
This will be added to with time.

To import such a database, first put the file somewhere useful like /tmp
and then issue the following command ...

<tscreen><verb>
dbimport oblast /tmp/OBLAST.FUL
</verb></tscreen>

This will update the existing local oblast database or create it if
it does not exist.

<sect1>Checking available databases

<P>
Once a database is created, you will want to check that it has been
added.  To do this use the <em>dbavail</em> command.  This will
output the available databases.  For example ...

<tscreen><verb>
dbavail
DB Name          Location   Chain
qsl              Local
buck             GB7ADX
hftest           GB7DXM
G0VGS de GB7MBC  3-Feb-2001 1925Z >
</verb></tscreen>

<sect1>Looking up databases

<P>
To look for information in a defined database, simply use the <em>dbshow</em>
command, for example ...

<tscreen><verb>
dbshow buckmaster G0YLM
</verb></tscreen>

will show the information for the callsign G0YLM from the buckmaster
database if it exists.  To make things more standard for the users
you can add an entry in the Aliases file so that it looks like a standard 
<em>show</em> command like this ...

<tscreen><verb>
'^sh\w*/buc', 'dbshow buckmaster', 'dbshow',
</verb></tscreen>

Now you can simply use show/buckmaster or an abreviation.

<sect1>Removing databases

<P>
To delete an existing database you use the <em>dbremove</em> command.
For example ...

<tscreen><verb>
dbremove oblast
</verb></tscreen>

would remove the oblast database and its associated datafile from the
system.  There are no warnings or recovery possible from this command.
If you remove a database it ceases to exist and would have to be created
from scratch if you still required it.

<sect>Information, files and useful programs

<sect1>MOTD

<P>
One of the more important things a cluster sysop needs to do is to get 
information to his users.  The simplest way to do this is to have a banner 
that is sent to the user on login.  This is know as a "message of the day" 
or "motd".  To set this up, simply create a file in /spider/data called motd 
and edit it to say whatever you want.  It is purely a text file and will be 
sent automatically to anyone logging in to the cluster.

<sect1>MOTD_NOR

<P>
This message of the day file lives in the same directory as the standard
motd file but is only sent to non-registered users.  Once registered they
will receive the same message as any other user.

<sect1>Downtime message

<P>
If for any reason the cluster is down, maybe for upgrade or maintenance but 
the machine is still running, a message can be sent to the user advising them 
of the fact.  This message lives in the /spider/data directory and is called
"offline".  Simply create the file and edit it to say whatever you wish.  
This file will be sent to a user attempting to log into the cluster when
DXSpider is not actually running.

<sect1>Other text messages

<P>
You can set other text messages to be read by the user if they input the file 
name.  This could be for news items or maybe information for new users.  
To set this up, make a directory under /spider called <em>packclus</em>.  
Under this directory you can create files called <em>news</em> or <em>newuser</em>
for example.  In fact you can create files with any names you like.  These can 
be listed by the user with the command ....

<tscreen><verb>
show/files
</verb></tscreen>

They can be read by the user by typing the command ....

<tscreen><verb>
type news
</verb></tscreen>

If the file they want to read is called <em>news</em>.  You could also set 
an alias for this in the Alias file to allow them just to type <em>news</em>

<P>
You can also store other information in this directory, either directly or 
nested under directories.  One use for this would be to store DX bulletins 
such as the OPDX bulletins.  These can be listed and read by the user.  
To keep things tidy, make a directory under /spider/packclus called
<em>bulletin</em>.  Now copy any OPDX or similar bulletins into it.  These 
can be listed by the user in the same way as above using the <em>show/files</em>
command with an extension for the bulletin directory you have just created, 
like this ....

<tscreen><verb>
show/files bulletin
</verb></tscreen>

<P>
An example would look like this ....

<tscreen><verb>
sh/files
bulletin      DIR 20-Dec-1999 1715Z news          1602 14-Dec-1999 1330Z
</verb></tscreen>

You can see that in the files area (basically the packclus directory) there is a 
file called <em>news</em> and a directory called <em>bulletin</em>.  You can 
also see that dates they were created.  In the case of the file <em>news</em>, 
you can also see the time it was last modified, a good clue as to whether the 
file has been updated since you last read it.  To read the file called 
<em>news</em> you would simply issue the command ....

<tscreen><verb>
type news
</verb></tscreen>

To look what is in the bulletin directory you issue the command ....

<tscreen><verb>
show/files bulletin
opdx390      21381 29-Nov-1999 1621Z opdx390.1     1670 29-Nov-1999 1621Z
opdx390.2     2193 29-Nov-1999 1621Z opdx391      25045 29-Nov-1999 1621Z  
opdx392      35969 29-Nov-1999 1621Z opdx393      15023 29-Nov-1999 1621Z  
opdx394      33429 29-Nov-1999 1621Z opdx394.1     3116 29-Nov-1999 1621Z  
opdx395      24319 29-Nov-1999 1621Z opdx396      32647 29-Nov-1999 1621Z
opdx396.1     5537 29-Nov-1999 1621Z opdx396.2     6242 29-Nov-1999 1621Z
opdx397      18433 29-Nov-1999 1621Z opdx398      19961 29-Nov-1999 1621Z  
opdx399      17719 29-Nov-1999 1621Z opdx400      19600 29-Nov-1999 1621Z
opdx401      27738 29-Nov-1999 1621Z opdx402      18698 29-Nov-1999 1621Z
opdx403      24994 29-Nov-1999 1621Z opdx404      15685 29-Nov-1999 1621Z
opdx405      13984 29-Nov-1999 1621Z opdx405.1     4166 29-Nov-1999 1621Z
opdx406      28934 29-Nov-1999 1621Z opdx407      24153 29-Nov-1999 1621Z
opdx408      15081 29-Nov-1999 1621Z opdx409      23234 29-Nov-1999 1621Z
Press Enter to continue, A to abort (16 lines) >
</verb></tscreen>

You can now read any file in this directory using the type command, like this ....

<tscreen><verb>
type bulletin/opdx391
Ohio/Penn DX Bulletin No. 391
The Ohio/Penn Dx PacketCluster
DX Bulletin No. 391
BID: $OPDX.391
January 11, 1999
Editor Tedd Mirgliotta, KB8NW
Provided by BARF-80 BBS Cleveland, Ohio
Online at 440-237-8208 28.8k-1200 Baud 8/N/1 (New Area Code!)
Thanks to the Northern Ohio Amateur Radio Society, Northern Ohio DX
Association, Ohio/Penn PacketCluster Network, K1XN & Golist, WB2RAJ/WB2YQH
& The 59(9) DXReport, W3UR & The Daily DX, K3TEJ, KN4UG, W4DC, NC6J, N6HR,
Press Enter to continue, A to abort (508 lines) >
</verb></tscreen>

The page length will of course depend on what you have it set to!

<sect1>The Aliases file

<P>
You will find a file in /spider/cmd/ called Aliases.  This is the file that
controls what a user gets when issuing a command.  It is also possible to
create your own aliases for databases and files you create locally.

<P>
You should not alter the original file in /spider/cmd/ but create a new file
with the same name in /spider/local_cmd.  This means that any new Aliases files
that is downloaded will not overwrite your self created Aliases and also that
you do not override any new Aliases with your copy in /spider/local_cmd/.  You
must remember that any files you store in /spider/local/ or /spider/local_cmd
override the originals if the same lines are used in both files.

<P>
The best way of dealing with all this then is to only put your own locally
created Aliases in the copy in /spider/local_cmd.  The example below is
currently in use at GB7MBC.

<tscreen><verb>

#
# Local Aliases File
#

package CmdAlias;

%alias = (
    'n' => [
      '^news$', 'type news', 'type',
    ],
    's' => [
      '^sh\w*/buck$', 'show/qrz', 'show',
      '^sh\w*/hftest$', 'dbshow hftest', 'dbshow',
      '^sh\w*/qsl$', 'dbshow qsl', 'dbshow',
      '^sh\w*/vhf$', 'dbshow vhf', 'dbshow',
      '^sh\w*/vhftest$', 'dbshow vhftest', 'dbshow',
        ],
)

</verb></tscreen>

<P>
Each alphabetical section should be preceded by the initial letter and the section
should be wrapped in square brackets as you can see.  The syntax is straightforward.
The first section on each line is the new command that will be allowed once the
alias is included.  The second section is the command it is replacing and the last
section is the actual command that is being used.

<P>
The eagle-eyed amongst you will have noticed that in the first section, the new
alias command has a '^' at the start and a '$' at the end.  Basically these force
a perfect match on the alias.  The '^' says match the beginning exactly and the
'$' says match the end exactly.  This prevents unwanted and unintentional matches
with similar commands.

<P>
I have 3 different types of alias in this file.  At the top is an alias for 'news'.  
This is a file I have created in the /spider/packclus/ directory where I can inform 
users of new developments or points of interest.  In it's initial form a user would 
have to use the command <em>type news</em>.  The alias allows them to simply type 
<em>news</em> to get the info.  Second is an alias for the <em>show/qrz</em>
command so that those users used to the original <em>show/buck</em> command in
AK1A will not get an error, and the rest of the lines are for locally created
databases so that a user can type <em>show/hftest</em> instead of having to use
the command <em>dbshow hftest</em> which is not as intuitive.

<P>
This file is just an example and you should edit it to your own requirements.
Once created, simply issue the command <em>load/alias</em> at the cluster
prompt as the sysop user and the aliases should be available.


<sect1>Console.pl

<P>
In later versions of Spider a simple console program is provided for the sysop.  
This has a type ahead buffer with line editing facilities and colour for spots,
announces etc.  To use this program, simply use console.pl instead of client.

<P>
To edit the colours, copy /spider/perl/Console.pl to /spider/local and edit the 
file with your favourite editor.

<sect1>Updating kepler data

<P>
Spider has a powerful and flexible show/satellite command.  In order for
this to be accurate, the kepler data has to be updated regularly.  In
general, this data is available as an email or via cluster mail.
Updating it is simple.  First you need to export the mail message as a
file.  You do this with the <em>export</em> command from the cluster prompt
as the sysop.  For example ...

<tscreen><verb>
export 5467 /spider/perl/keps.in
</verb></tscreen>

<P>
would export message number 5467 as a file called keps.in in the
/spider/perl directory.

<P>
Now login to a VT as sysop and cd /spider/perl.  There is a command in
the perl directory called <em>convkeps.pl</em>.  All we need to do now is
convert the file like so ...

<tscreen><verb>
./convkeps.pl keps.in
</verb></tscreen>

<P>
Now go back to the cluster and issue the command ...

<tscreen><verb>
load/keps
</verb></tscreen>

<P>
That is it!  the kepler data has been updated.

<sect1>The QRZ callbook

<P>
The command <em>sh/qrz</em> will only work once you have followed a few
simple steps.  First you need to get a user ID and password from qrz.com.
Simply go to the site and create one.  Secondly you need to copy the file
/spider/perl/Internet.pm to /spider/local and alter it to match your user
ID and password.  You also at this point need to set $allow=1 to complete
the setup.  Many thanks to Fred Lloyd, the proprieter of
<htmlurl url="http://www.qrz.com" name="qrz.com"> for allowing this access.

<sect1>Connecting logging programs

<P>
There appear to be very few logging programs out there that support telnet
especially the popular ones like LogEQF, Turbolog etc.  This can make it
difficult to connect to your own cluster!
The way to do it is to make the logging program think it has a TNC attached
to a com port on the logging PC and 'push' a linux login out to it.
This is achieved very simply by the use of <em>agetty</em>.

<P>
All that is required is to add a line in /etc/inittab to have the client
ready for a connection on the com port of your choice.  Remember that in
Linux, the com ports start at ttyS0 for com1, ttyS1 for com2 etc.

<tscreen><verb>
c4:2345:respawn:/sbin/agetty -L 9600 ttyS1
</verb></tscreen>

<P>
Add this after the standard runlevel lines in /etc/inittab.  The above
line works on ttyS1 (com2).  Now as root, issue the command <em>telinit q</em>
and it should be ready for connection.  All that is required is a 3 wire
serial lead (tx, rx and signal ground).  Tell you logging program to use
8n1 at 9600 baud and you should see a Linux login prompt.  Login as normal
and then telnet from there to the cluster.

<sect>Java Web applet

<P>
In the spider tree will be a directory <em>spider-web</em>.  This is a
neat little java web applet that can be run from a website.  The applet
must run on the same machine as the cluster.  The included README file is
shown below.

<P>
I should comment here that the applet is precompiled, that is, ready to go.
It was compiled using JDK1.3.1.  If your version is earlier than this then it
may not work.  Should that be the case you need to recompile or update your
JDK.  To recompile do the following ...

<tscreen><verb>
cd /spider/spider-web
rm *.class
/usr/bin/javac spiderclient.java
</verb></tscreen>

<P>
I have used /usr/bin/javac as an example, your path to javac may be different.

<verb>
Spider-WEB v0.6b

Completely based on a clx web client written in Java by dl6dbh
(ftp://clx.muc.de/pub/clx/clx-java_10130001.tgz)

The webserver has to run on the same machine as your DxSpider software!

It is assumed that you have Java installed.  You need JDK1.3.1 at least.

Installation instructions (Performed as root):

Put all the files in the spider-web directory into a newly created directory
under the DocumentRoot of your websever for instance 'client'. In my case
this is:  /home/httpd/html/client/ although ymmv.  For Suse the correct
path should be /usr/local/httpd/htdocs/client/ for example.

Move spider.cgi to the cgi-bin directory of your webserver, in my case that is
/home/httpd/cgi-bin/ although ymmv.  For Suse the correct path should be
/usr/local/httpd/cgi-bin/ for example.

Change the permissions of the files to ensure they are correct, obviously you
will need to use the correct path the the files according to your system:

chmod 755 /home/httpd/html/cgi-bin/spider.cgi
chmod -R 755 /home/httpd/html/client/

By default the spider.cgi script should pick up your hostname (As long as this
is set correctly).  If it does not or your hostname differs from the name that
you attach to the public address that you are using, then edit spider.cgi :

# Uncomment and set the hostname manually here if the above fails.
# $HOSTNAME = "gb7mbc.spoo.org" ;
$PORT = "8000" ;

'HOSTNAME' is the hostname of your cluster.

'PORT' is the portnumber that you use to connect to your DxSpider via
telnet (see Listeners.pm)

NOTE: If you can start the console but cannot connect to the cluster from it,
then it is possible that the machine you are on cannot resolve the hostname of 
your cluster machine.  If this is the case, you need to set your hostname 
manually as above.

You also need to set the $NODECALL variable.  This prints the name of your
choosing (probably your cluster callsign) on the html page.

You now can connect to Spider-Web via http://yourserver/cgi-bin/spider.cgi
</verb>

<sect>Web based statistics

<P>
From version 1.50, you can use the freeware software MRTG to produce
really nice graphical statistics on your web site.  For an example
try <htmlurl url="http://www.gb7mbc.net/mrtg/stats.html" name="http://www.gb7mbc.net/mrtg/stats.html">.

<P>
The following should help you get it all working.

<P>
First you need to download the latest version of MRTG from <htmlurl url="http://people.ee.ethz.ch/~oetiker/webtools/mrtg/" name="http://people.ee.ethz.ch/~oetiker/webtools/mrtg/">.
You will also need the following files..

<tscreen><verb>
libpng-1.0.14.tar.gz
zlib-1.1.4.tar.gz
gd-1.8.3.tar.gz
</verb></tscreen>

Login to your machine as the root user, put all the downloaded files 
in /usr/local/src/ (or wherever you prefer) and untar and compile them.  
All the information to compile and install these sources come with them.
After compilation and installation,  you will find MRTG in /usr/local/mrtg-2.

<P>
Now copy all the files in /usr/local/src/mrtg-2.9.22/images/ to 
/spider/html/mrtg/

<P>
You now need to make 2 symbolic links like below...

<tscreen><verb>
ln -s /usr/local/mrtg-2/bin/mrtg /usr/bin/mrtg
ln -s /usr/local/mrtg-2/lib/mrtg2 /usr/lib/mrtg2
</verb></tscreen>

<P>
Now login to the cluster with your sysop callsign and run the command 
"mrtg all".

<P>Now you are nearly there!  Login as the sysop user and change to the
/spider/html/mrtg/ directory.  Now run the command <em>indexmaker</em> as
shown below...

<tscreen><verb>
indexmaker --output stats.html --columns=1 --title "MRTG statistics for GB7DJK" ../../mrtg/mrtg.cfg
</verb></tscreen>

Changing the callsign for your own cluster callsign of course!

<P>
And finally you need to login as the root user and create one last
symbolic link.  Where this points will depend on where your html
documents are kept.  For RedHat systems you use...

<tscreen><verb>
ln -s /home/sysop/spider/html/mrtg /home/httpd/html/mrtg
</verb></tscreen>

and for SuSE systems...

<tscreen><verb>
ln -s /home/sysop/spider/html/mrtg /usr/local/httpd/htdocs/mrtg
</verb></tscreen>

If you now point your browser to your website as below it should all
be happening!

<tscreen><verb>
http://www.xxx.xxx/mrtg/stats.html
</verb></tscreen>

Of course, to get the stats to update, you need to add some information
in the spider crontab file as below...

<tscreen><verb>
# Update stats for mrtg on website
00,05,10,15,20,25,30,35,40,45,50,55 * * * * run_cmd('mrtg all')
</verb></tscreen>

This will update the site every 5 minutes.

<sect>Security

<P>
From version 1.49 DXSpider has some additional security features.  These
are not by any means meant to be exhaustive, however they do afford some
security against piracy.  These two new features can be used independently 
of each other or in concert to tighten the security.

<sect1>Registration

<P>
The basic principle of registration is simple.  If a user is not registered
by the sysop, then they have read-only access to the cluster.  The only
thing they can actually send is a talk or a message to the sysop.  In
order for them to be able to spot, send announces or talks etc the sysop
must register them with the <em>set/register</em> command, like this ...

<tscreen><verb>
set/register g0vgs
</verb></tscreen>

The user g0vgs can now fully use the cluster.  In order to enable 
registration, you can issue the command ...

<tscreen><verb>
set/var $main::reqreg = 1
</verb></tscreen>

Any users that are not registered will now see the motd_nor file rather
than the motd file as discussed in the Information, files and useful 
programs section.

<P>
Entering this line at the prompt will only last for the time the cluster
is running of course and would not be present on a restart.  To make the
change permanent, add the above line to /spider/scripts/startup.  To
read more on the startup file, see the section on Information, files 
and useful programs.

<P>
To unregister a user use <em>unset/register</em> and to show the list
of registered users, use the command <em>show/register</em>.

<sect1>Passwords

<P>
At the moment, passwords only affect users who login to a DXSpider
cluster node via telnet.  If a user requires a password, they can
either set it themselves or have the sysop enter it for them by using
the <em>set/password</em> command.  Any users who already have passwords, 
such as remote sysops, will be asked for their passwords automatically 
by the cluster.  Using passwords in this way means that the user has a
choice on whether to have a password or not.  To force the use of
passwords at login, issue the command ...

<tscreen><verb>
set/var $main::passwdreq = 1
</verb></tscreen>

at the cluster prompt.  This can also be added to the /spider/scripts/startup
file as above to make the change permanent.

<P>
Of course, if you do this you will have to assign a password for each of 
your users.  If you were asking them to register, it is anticipated that
you would ask them to send you a message both to ask to be registered and
to give you the password they wish to use.

<P>
Should a user forget their password, it can be reset by the sysop by
first removing the existing password and then setting a new one like so ...

<tscreen><verb>
unset/password g0vgs
set/password g0vgs new_password
</verb></tscreen>

<sect>CVS

<sect1>CVS from a Linux platform

<P>
CVS stands for "Concurrent Versions System" and the CVS for DXSpider is held
at <htmlurl url="http://www.sourceforge.net" name="Sourceforge">.  This means
that it is possible to update your DXSpider installation to the latest
sources by using a few simple commands.  A graphical interface to CVS for
Windows is explained in the next section.

<P>
Please be aware that if you update your system using CVS, it is possible that
you could be running code that is very beta and not fully tested.  There is
a possibility that it could be unstable.

<P>
I am of course assuming that you have a machine with both DXSpider and
Internet access running.

<P>
BEFORE YOU EVEN CONSIDER STARTING WITH THIS MAKE A BACKUP OF YOUR
ENTIRE SPIDER TREE!!

<P>
Assuming you are connected to the Internet, you need to login to the
CVS repository and then update your Spider source.  There are several
steps which are listed below ...

<P>
First login as the user <em>sysop</em>.  Next you need to connect to the CVS
repository.  You do this with the command below ...

<verb>
cvs -d:pserver:anonymous@cvs.DXSpider.sourceforge.net:/cvsroot/dxspider login
</verb>

You will get a password prompt.  Simply hit return here and your machine should
return to a normal linux prompt.

<P>
What happens next depends on whether you have an existing installation that
you want to update with the latest and greatest or whether you just want
to see what is there and/or run it on a new machine for testing.

If you are installing Spider from CVS then change directory to /home/sysop

If you are wanting to update Spider then cd to /tmp

<P>
The next step will create a brand new 'spider' directory in your current
directory.

<verb>
cvs -z3 -d:pserver:anonymous@cvs.DXSpider.sourceforge.net:/cvsroot/dxspider co spider
</verb>

This command is all on one line.

<P>
Hopefully your screen should show you downloading files.  The -z3 simply compresses
the download to improve speed.
When this has finished, you will have exactly the same as if you had untarred a full
tarball PLUS some extra directories and files that CVS needs to do the magic that
it does.

<P>
Now if you are doing a new installation, that's it.  Carry on as if you have
just downloaded and untarred the lastest tarball.

<P>
If you want to upgrade your current installation then do this ...

<tscreen><verb>
tar cvfz /tmp/s.tgz spider
cd /
tar xvfzp /tmp/s.tgz
</verb></tscreen>

This is assuming you downloaded to the /tmp directory of course.

<P>
NOTE:  the 'p' on the end of the 'xvfz' is IMPORTANT!   It keeps the permissions
correct.  YOU WERE LOGGED IN AS THE USER SYSOP WEREN'T YOU?????

Remember to recompile the C client (cd /spider/src; make)

<P>
At this point the files have been upgraded.  You can (usually) restart the cluster
in your own time.  However, if you attempt to use any new commands or features
expect it to be fatal!  At least your cluster will have been restarted then so it
will be too late to worry about it!

<P>
Now the magic part!  From now on when you want to update, simply connect to the
Internet and then, as the user <em>sysop</em> ...

<tscreen><verb>
cd /spider
cvs -z3 update -d
</verb></tscreen>

and your files will be updated.  As above, remember to recompile the "C" client
if it has been updated (CVS will tell you) and restart if any of the perl scripts
have been altered or added, again, CVS will tell you.

<P>
You will find any changes documented in the /spider/Changes file.

<sect1>CVS from a Windows platform

<P>
After the initial setup, an update to your DXSpider software is no more than a couple
of clicks away.  This section is intended to explain and illustrate the use of the
WinCVS application to update your DXSpider software.  The current stable version of
WinCVS is Ver. 1.2.  You can get this software at:

<htmlurl url="http://prdownloads.sourceforge.net/cvsgui/WinCvs120.zip" name="http://prdownloads.sourceforge.net/cvsgui/WinCvs120.zip">

Pick your download mirror and then install WinCVS after the download is complete.

In this next section I have included a series of links to .jpg files to take advantage of the
picture and 1000 words equivalency.  The .jpg files are in the C:\spider\html directory.  If
someone using a Linux system is reading this section from boredom, the files are in
/home/sysop/spider/html.  One aside, a Linux user can also get a copy of gcvs and do your updates
graphically as opposed to from the command line.  The following descriptions are almost identical
between WinCvs and gcvs.  The following screen shots have duplicate links, depending upon whether
you are viewing this information under the Windows or Linux operating system.

When WinCVS is installed, running, and you are connected to the internet, the initial screen looks like:

<htmlurl url="initial.jpg" name="initial.jpg">

If you want, you can also look at these .jpg files with another viewer that might provide some
better clarity to the image.  On the left is the directory tree for your hard disk.  Notice that
the spider directory has a gray highlight.

To start configuring WinCVS, click on Admin at the top of the screen and then Preferences.  This 
should get you:

<htmlurl url="pref-gen.jpg" name="pref-gen.jpg">

In the top line for CVSROOT, enter:
<tscreen><verb>
anonymous@cvs.DXSpider.sourceforge.net:/cvsroot/dxspider login
</verb></tscreen>

and select
<tscreen><verb>
"passwd" file on the cvs server
</verb></tscreen>

for Authentication on the General tab.

Next, move to the right to the Ports tab.

<htmlurl url="pref-ports.jpg" name="pref-ports.jpg">

In here, check the box on the second line down for the "pserver" port.  Enter a port number of 2401.

Finally, go to the WinCvs tab all the way to the right.

<htmlurl url="pref-wincvs.jpg" name="pref-wincvs.jpg">

Enter Notepad as the viewer to open files.  For the HOME folder, put "C:\spider" and click OK
because the configuration is now complete.

You are now ready to upgrade your copy of DXSpider.  Click on the greyed Spider folder
shown in the directory tree on the left of the WinCVS display.  Two things should happen.  The Spider
folder will be selected and the greyed-out arrow located just below the word Query in the top line will
turn to solid green.

For anyone using gcvs under Linux, the green arrow is located on the extreme left of the display,
under the word File.  A gcvs screen looks like:

<htmlurl url="gcvs.jpg" name="gcvs.jpg">

Click on the now green arrow to start the download process.  An Update Settings box will be displayed
to which you can simply say OK.

<htmlurl url="update-OK.jpg" name="update-OK.jpg">

For future reference, the Update Settings box is the place where you can enter information to revert
to a prior version of DXSpider.  Information on reverting to a Before Date is contained in the WinCVS
manual.

After a short period of time, a series of file names will scroll by in the lower pane of the WinCVS
window.  Eventually you should see
<tscreen><verb>
*****CVS exited normally with code 0*****

</verb></tscreen>
appear in the lower pane.  You're done.  The updated files are in place ready for you to stop and then
restart your DXSpider.  After the restart, you're running with the latest version of DXSpider.

<htmlurl url="completed.jpg" name="completed.jpg">

To paraphrase from the CVS section... Now the magic part!  From now on when you want to update, simply
connect to the Internet and start WinCVS.
<tscreen><verb>
Click on the greyed-out Spider directory in the left screen
Click on the green down arrow
Click OK on the Update Settings dialog box
Restart your Spider software
</verb></tscreen>

