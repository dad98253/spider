<!doctype linuxdoc system>

<article>

<!-- Title information -->

<title>The DXSpider Administration Manual v1.49</title> 
<author>Ian Maude, G0VGS, (ianmaude@btinternet.com)</author>
<date>November 2001 revision 1.1</date>

<abstract>
A reference for SysOps of the DXSpider DXCluster program.
</abstract>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->

<sect>Routing and Filtering

<sect1>Introduction

<P>
From DXSpider version 1.48, major changes were introduced to the way 
node connections are treated.  This is part of an ongoing process to
remove problems with loops and to enable talk and other functions to
propagate across the whole of the worldwide cluster network.  In fact,
in a Spider network, it would be useful, perhaps even necessary to
have loops.  This would give real resilience to the network, meaning
that if a link dropped, the information flow would simply come in and
go out via a different route.  Of course, we do not have a complete
network of Spider nodes, there are other programs out there.  Some of
these do not have any protection from loops.  Certainly AK1A does not 
handle loops well at all.  It is therefore necessary to have some form 
of protection for these nodes.

<P>
In fact DXSpider has had a simple system for some time which is called
<it>isolation</it>. This is similar to what in other systems such as 
<bf>clx</bf>, is called <it>passive mode</it>. A more detailed explanation
of <it>isolation</it> is given further below. This system is still available
and, for simple networks, is probably all that you need.

<P>
The new functionality introduced in version 1.48 allows filtering the node
and user protocol frames on a "per interface" basis. We call this
<it>route filtering</it>. This is used <bf>instead of</bf>
<it>isolation</it>. 

<p>
What this really means is that you can control more or less completely
which user and node management PC protocol frames pass to each of your 
partner nodes. You can also limit what comes into your node from your 
partners. It is even possible to control the settings that your partner 
node has for the routing information that it sends to you 
(using the <it>rcmd</it> command).

<sect1>Route Filters

<p>
Initially when route filters were being tested we generated a
"default" filter.  Unfortunately it quickly became apparent that this
might suit the UK cluster network but didn't really fit anybody else.
However using a default filter is an appropriate thing to do. How, is
explained further on.

<p>
The first thing that you must do is determine whether you need to use 
route filtering <bf>at all</bf>. If you are a "normal" node with two or 
three partners and you arranged in an "official" non-looping tree type 
network, then <bf>you do not need to do route filtering</bf> and you will 
feel a lot better for not getting involved. If you are successfully using 
<it>isolation</it> then you also probably don't need to use route filtering.

<p>
To put it simply, you should not mix Isolation and Route Filtering.  It 
will work, of sorts, but you will not get the expected results.  If you 
are using Isolation sucessfully at the moment, do not get involved in 
Route Filtering unless you have a good supply of aspirin!  Once you have 
started down the road of Route Filtering, do not use Isolation either.
Use one or the other, not both.

<p>
You will only require this functionality if you are "well-connected". What 
that means is that you are connected to several different parts of (say) 
the EU cluster and, at the same time, also connected to two or three places 
in the US which, in turn are connected back to the EU. This is called a 
"loop" and if you are seriously looped then you need filtering.

<P>
I should at this stage give a little bit of background on filters.  All
the filters in Spider work in basically the same way.  You can either
accept or reject various options in order to create the filter rules
you wish to achieve.  Some filters are user settable, others can only
be altered by the sysop.  Route filtering can only be done by the sysop.

<P> 
Anyway, without further discouragement, let me start the process
of explanation.

<sect1>The node_default filter

<P>
All normal systems should have a default routing filter and it should
usually be set to send only the normal, unlooped, view of your
"national" network.  Here in the UK that means nodes from the UK and
Eire, in EU it is more complex as the networks there grew up in a more
intertwined way.

<p> 
The generic commands are:-

<tscreen><verb>
reject/route node_default &lt;filter_option&gt;

or

accept/route node_default &lt;filter_option&gt;
</verb></tscreen>

where filter_option is one of the following ...

<tscreen><verb>
call &lt;prefixes&gt;
call_dxcc &lt;numbers&gt;
call_itu &lt;numbers&gt;
call_zone &lt;numbers&gt;
channel &lt;prefixes&gt;
channel_dxcc &lt;numbers&gt;
channel_itu &lt;numbers&gt;
channel_zone &lt;numbers&gt;
</verb></tscreen>

Please be careful if you alter this setting, it will affect 
<bf><it>ALL</it></bf> your links!  Remember, this is a <it>default</it>
filter for node connections, not a <it>per link</it> default.

<p>
For the default routing filter then you have two real choices: either
a "national" view or the "safe" option of only your own
callsign. Examples of each (for my node: GB7DJK) are:-

<tscreen><verb>
acc/route node_default call_dxcc 61,38
acc/route node_default call gb7djk
</verb></tscreen>

GB7DJK uses the first of these. The DXCC countries can be obtained from the 
<it>show/prefix</it> command.

<p>
The example filters shown control <it>output</it> <bf>TO</bf> all your
partner nodes unless they have a specific filter applied to them (see
next section).

<p>
It is also possible to control the <it>incoming</it> routing
information that you are prepared to accept <bf>FROM</bf> your partner
nodes. The reason this is necessary is to make sure that stuff like
mail, pings and similar commands a) go down the correct links and b)
don't loop around excessively. Again using GB7DJK as an example a typical
default input filter would be something like:

<tscreen><verb>
rej/route node_default input call_dxcc 61,38 and not channel_dxcc 61,38
</verb></tscreen>

What this does is accept node and user information for our national
network from nodes that are in our national network, but rejects such
information from anyone else. Although it doesn't explicitly say so,
by implication, any other node information (not from the UK and Eire)
is accepted.

<p>
As I imagine it will take a little while to get one's head around all of 
this you can study the effect of any rules that you try by watching the 
debug output after having done:-

<tscreen><verb>
set/debug filter
</verb></tscreen>

After you have got tired of that, to put it back the way it was:-

<tscreen><verb>
unset/debug filter
</verb></tscreen>

<sect1>General route filtering

<P>
Exactly the same rules apply for general route filtering.  You would
use either an accept filter or a reject filter like this ...

<tscreen><verb>
reject/route &lt;node_call&gt; &lt;filter_option&gt;

or

accept/route &lt;node_call&gt; &lt;filter_option&gt; 
</verb></tscreen>

<P>
Here are some examples of route filters ...

<tscreen><verb>
rej/route gb7djk call_dxcc 61,38 (send everything except UK+EIRE nodes)
rej/route all                    (equiv to [very] restricted mode)
acc/route gb7djk call_dxcc 61,38 (send only UK+EIRE nodes)
acc/route gb7djk call gb7djk     (equiv to SET/ISOLATE)
</verb></tscreen>

In practice you will either be opening the default filter out for a
partner by defining a specific filter for that callsign:-
 
<tscreen><verb>
acc/route gb7baa all
acc/route gb7baa input all
</verb></tscreen>

or restricting it quite a lot, in fact making it very nearly like an 
<it>isolated</it> node, like this:-

<tscreen><verb>
acc/route pi4ehv-8 call gb7djk
rej/route pi4ehv-8 input call_dxcc 61,38 
</verb></tscreen>

This last example takes everything except UK and Eire from PI4EHV-8
but only sends him my local configuration (just a PC19 for GB7DJK and
PC16s for my local users).

<p>
It is possible to write <bf>much</bf> more complex rules, there are up 
to 10 accept/reject pairs per callsign per filter. For more information 
see the next section. 


<sect1>General filter rules

<P>
Upto v1.44 it was not possible for the user to set their own filters.  From 
v1.45 though that has all changed.  It is now possible to set filters for just 
about anything you wish.  If you have just updated from an older version of 
DXSpider you will need to update your new filters.  You do not need to do 
anything with your old filters, they will be renamed as you update.

<P>
There are 3 basic commands involved in setting and manipulating filters.  These 
are <em>accept</em>, <em>reject</em> and <em>clear</em>.  First we will look
generally at filtering. There are a number of things you can filter in the 
DXSpider system. They all use the same general mechanism.

<P>
In general terms you can create a "reject" or an "accept" filter which can have 
up to 10 lines in it. You do this using, for example ... 

<tscreen><verb> 
accept/spots .....
reject/spots .....
</verb></tscreen>

where ..... are the specific commands for that type of filter. There are filters 
for spots, wwv, announce, wcy and (for sysops) connects. See each different 
accept or reject command reference for more details.

There is also a command to clear out one or more lines in a filter. They are ...

<tscreen><verb>
clear/spots 1
clear/spots all
</verb></tscreen>

There is clear/xxxx command for each type of filter.

<P>
and you can check that your filters have worked by the command ... 

<tscreen><verb>  
show/filter
</verb></tscreen>

<P>
For now we are going to use spots for the examples, but you can apply the same
principles to all types of filter.

<sect1>Types of filter

<P>
There are two main types of filter, <em>accept</em> or <em>reject</em>.  You 
can use either to achieve the result you want dependent on your own preference 
and which is more simple to do.  It is pointless writing 8 lines of reject 
filters when 1 accept filter would do the same thing!  Each filter has 10 
lines (of any length) which are tried in order.  If a line matches then the 
action you have specified is taken (ie reject means ignore it and accept 
means take it)

<P>
If you specify reject filters, then any lines that arrive that match the filter 
will be dumped but all else will be accepted.  If you use an accept filter, 
then ONLY the lines in the filter will be accepted and all else will be dumped.
For example if you have a single line <em>accept</em> filter ...

<tscreen><verb>
accept/spots on vhf and (by_zone 14,15,16 or call_zone 14,15,16)
</verb></tscreen>

then you will <em>ONLY</em> get VHF spots <em>from</em> or <em>to</em> CQ zones 
14, 15 and 16.

<P>
If you set a reject filter like this ...

<tscreen><verb>
reject/spots on hf/cw
</verb></tscreen>

Then you will get everything <em>EXCEPT</em> HF CW spots.  You could make this 
single filter even more flexible.  For example, if you are interested in IOTA 
and will work it even on CW even though normally you are not interested in 
CW, then you could say ...

<tscreen><verb>
reject/spots on hf/cw and not info iota
</verb></tscreen>

But in that case you might only be interested in iota and say:-

<tscreen><verb>
accept/spots not on hf/cw or info iota
</verb></tscreen>

which achieves exactly the same thing. You should choose one or the other 
until you are comfortable with the way it works. You can mix them if you 
wish (actually you can have an accept AND a reject on the same line) but 
don't attempt this until you are sure you know what you are doing!

<P>
You can arrange your filter lines into logical units, either for your own
understanding or simply convenience. Here is an example ...

<tscreen><verb>
reject/spots 1 on hf/cw
reject/spots 2 on 50000/1400000 not (by_zone 14,15,16 or call_zone 14,15,16)  
</verb></tscreen>

What this does is to ignore all HF CW spots and also rejects any spots on VHF 
which don't either originate or spot someone in Europe. 

<P>
This is an example where you would use a line number (1 and 2 in this case), if 
you leave the digit out, the system assumes '1'. Digits '0'-'9' are available.  
This make it easier to see just what filters you have set.  It also makes it 
more simple to remove individual filters, during a contest for example.

<P>
You will notice in the above example that the second line has brackets.  Look 
at the line logically.  You can see there are 2 separate sections to it.  We 
are saying reject spots that are VHF or above <em>APART</em> from those in 
zones 14, 15 and 16 (either spotted there or originated there).  If you did 
not have the brackets to separate the 2 sections, then Spider would read it 
logically from the front and see a different expression entirely ...

<tscreen><verb>
(on 50000/1400000 and by_zone 14,15,16) or call_zone 14,15,16 
</verb></tscreen>

The simple way to remember this is, if you use OR - use brackets. Whilst we are 
here CASE is not important. 'And BY_Zone' is just the same as 'and by_zone'.

As mentioned earlier, setting several filters can be more flexible than 
simply setting one complex one.  Doing it in this way means that if you want 
to alter your filter you can just redefine or remove one or more lines of it or 
one line. For example ...

<tscreen><verb>
reject/spots 1 on hf/ssb
</verb></tscreen>

would redefine our earlier example, or 

<tscreen><verb>
clear/spots 1
</verb></tscreen>

To remove all the filter lines in the spot filter ...

<tscreen><verb>
clear/spots all
</verb></tscreen>

<sect1>Filter options

<P>
You can filter in several different ways.  The options are listed in the
various helpfiles for accept, reject and filter.

<sect1>Default filters

<P>
Sometimes all that is needed is a general rule for node connects.  This can
be done with a node_default filter.  This rule will always be followed, even
if the link is isolated, unless another filter is set specifically.  Default
rules can be set for nodes and users.  They can be set for spots, announces,
WWV and WCY.  They can also be used for hops.  An example might look like 
this ...

<tscreen><verb>
accept/spot node_default by_zone 14,15,16,20,33
set/hops node_default spot 50
</verb></tscreen>

This filter is for spots only, you could set others for announce, WWV and WCY.
This filter would work for ALL nodes unless a specific filter is written to 
override it for a particular node.  You can also set a user_default should
you require.  It is important to note that default filters should be
considered to be "connected".  By this I mean that should you override the
default filter for spots, you need to add a rule for the hops for spots also.

<sect1>Advanced filtering

<P>
Once you are happy with the results you get, you may like to experiment. 

<P>
The previous example that filters hf/cw spots and accepts vhf/uhf spots from EU 
can be written with a mixed filter, for example ... 

<tscreen><verb>
rej/spot on hf/cw
acc/spot on 0/30000
acc/spot 2 on 50000/1400000 and (by_zone 14,15,16 or call_zone 14,15,16)
</verb></tscreen>

Note that the first filter has not been specified with a number.  This will 
automatically be assumed to be number 1.  In this case, we have said <em>reject all
HF spots in the CW section of the bands but accept all others at HF.  Also
accept anything in VHF and above spotted in or by operators in the zones
14, 15 and 16</em>.  Each filter slot actually has a 'reject' slot and 
an 'accept' slot. The reject slot is executed BEFORE the accept slot.

<P>
It was mentioned earlier that after a reject test that doesn't match, the default 
for following tests is 'accept', the reverse is true for 'accept'. In the example 
what happens is that the reject is executed first, any non hf/cw spot is passed 
to the accept line, which lets through everything else on HF.  The next filter line 
lets through just VHF/UHF spots from EU.

<sect1>Basic hop control

<P>
In /spider/data you will find a file called hop_table.pl.  This is the file 
that controls your hop count settings.  It has a set of default hops on the 
various PC frames and also a set for each node you want to alter the hops for.  
You may be happy with the default settings of course, but this powerful tool 
can help to protect and improve the network.  The file will look something 
like this ...

<tscreen><verb>
# 
# hop table construction
# 

package DXProt;

# default hopcount to use
$def_hopcount = 5;

# some variable hop counts based on message type
%hopcount = 
(
 11 => 10,
 16 => 10,
 17 => 10,
 19 => 10,
 21 => 10,
);


# the per node hop control thingy


%nodehops = 

 GB7ADX => {            11 => 8,
                        12 => 8,
                        16 => 8,
                        17 => 8,
                        19 => 8,
                        21 => 8,
                   },

 GB7UDX => {            11 => 8,
                        12 => 8,
                        16 => 8,
                        17 => 8,
                        19 => 8,
                        21 => 8,
                   },
 GB7BAA => {
                        11 => 5,
                        12 => 8,
                        16 => 8,
                        17 => 8,
                        19 => 8,
                        21 => 8,
                   },
};
</verb></tscreen>

<P>
Each set of hops is contained within a pair of curly braces and contains a 
series of PC frame types.  PC11 for example is a DX spot. The figures here 
are not exhaustive but should give you a good idea of how the file works.

<P>
SHould any of the nodecalls include an ssid, it is important to wrap the
whole call in single quotes, like this ...

<tscreen><verb>
 'DB0FHF-15' => {
                        11 => 5,
                        12 => 8,
                        16 => 8,
                        17 => 8,
                        19 => 8,
                        21 => 8,
                   },
</verb></tscreen>

If you do not do this, you will get errors and the file will not work as
expected.

<P>
You can alter this file at any time, including whilst the cluster is running.  
If you alter the file during runtime, the command <em>load/hops</em> will 
bring your changes into effect.

<sect1>Hop Control on Specific Nodes

<p>You can set a callsign specific hop count for any of the standard filter
options so:-

<tscreen><verb>
set/hops gb7djk spot 4
set/hops node_default route 10
set/hops gb7baa wcy 5
</verb></tscreen>
 
all work on their specific area of the protocol.

<p>
The <em>set/hops</em> command overrides any hops that you have set otherwise.

<p>
You can set what hops have been set using the <em>show/hops</em> command.

<sect1>Isolating networks

<P>
It is possible to isolate networks from each other on a "gateway" node using the
 <em>set/isolate &lt;node_call&gt;</em> command.
	
<P>
The effect of this is to partition an isolated network completely from another 
node connected to your node. Your node will appear on and otherwise behave 
normally on every network to which you are connected, but data from an isolated 
network will not cross onto any other network or vice versa. However all the 
spot, announce and WWV traffic and personal messages will still be handled 
locally (because you are a real node on all connected networks), that is locally
connected users will appear on all networks and will be able to access and 
receive information from all networks transparently.  All routed messages will 
be sent as normal, so if a user on one network knows that you are a gateway for 
another network, he can still still send a talk/announce etc message via your 
node and it will be routed across.

<P>
If you use isolate on a node connection you will continue to receive
all information from the isolated partner, however you will not pass
any information back to the isolated node.  There are times when you
would like to forward only spots across a link (maybe during a contest
for example).  To do this, isolate the node in the normal way and use
an <em>acc/spot &gt;call&lt; all</em> filter to override the isolate. 

<sect>Other filters

<sect1>Filtering Mail

<P>
In the /spider/msg directory you will find a file called badmsg.pl.issue.  Rename
this to badmsg.pl and edit the file.  The original looks something like this ....

<tscreen><verb>

# the list of regexes for messages that we won't store having
# received them (bear in mind that we must receive them fully before
# we can bin them)


# The format of each line is as follows

#     type      source             pattern 
#     P/B/F     T/F/O/S            regex  

# type: P - private, B - bulletin (msg), F - file (ak1a bull)
# source: T - to field, F - from field,  O - origin, S - subject 
# pattern: a perl regex on the field requested

# Currently only type B and P msgs are affected by this code.
# 
# The list is read from the top down, the first pattern that matches
# causes the action to be taken.

# The pattern can be undef or 0 in which case it will always be selected
# for the action specified



package DXMsg;

@badmsg = (
'B',    'T',    'SALE', 
'B',    'T',    'WANTED',
'B',    'S',    'WANTED',
'B',    'S',    'SALE', 
'B',    'S',    'WTB',
'B',    'S',    'WTS',
'B',    'T',    'FS',
);
</verb></tscreen>

<P>
I think this is fairly self explanatory.  It is simply a list of subject 
headers that we do not want to pass on to either the users of the cluster or 
the other cluster nodes that we are linked to.  This is usually because of 
rules and regulations pertaining to items for sale etc in a particular country.


<sect1>Filtering words from text fields in Announce, Talk and DX spots

<p>
From version 1.48 onwards the interface to this has changed. You can now
use the commands <em>set/badword</em> to add words that you are not prepared
to see on the cluster, <em>unset/badword</em> to allow that word again and 
<em>show/badword</em> to list the words that you have set.

<p>
If you have a previous <em>/spider/data/badwords</em>, the first time you start
the node, it will read and convert this file to the new commands. The old style
file will then be removed.

<sect1>Stopping (possibly bad) DX Spots from Nodes or Spotters

<p> 
There are a number of commands that control whether a spot progresses
any further by regarding it as "bad" in some way.

<p>
A DX Spot has a number of fields which can be checked to see whether they
contain "bad" values, they are: the DX callsign itself, the Spotter and
the Originating Node.

<p>
There are a set of commands which allow the sysop to control whether a
spot continues:-

<tscreen><verb>
set/baddx
set/badspotter
set/badnode
</verb></tscreen>

These work in the same as the <em>set/badword</em> command, you can add
any words or callsigns or whatever to the appropriate database. For
example, to stop a spot from a particular node you do:

<tscreen><verb>
set/badnode gb7djk gb7dxc
</verb></tscreen>

a bad spotter:

<tscreen><verb>
set/badspotter b0mb p1rat nocall
</verb></tscreen>

and some bad dx:

<tscreen><verb>
set/baddx video wsjt
</verb></tscreen>

You can remove a word using the appropriate unset command
(<em>unset/baddx, unset/badspotter, unset/badnode</em>) or list them
using one of <em>show/baddx, show/badspotter</em> and
<em>show/badnode</em>.

<sect>Mail

<P>
DXSpider deals seamlessly with standard AK1A type mail.  It supports both
personal and bulletin mail and the sysop has additional commands to ensure
that mail gets to where it is meant.  DXSpider will send mail almost
immediately, assuming that the target is on line.  However, only one
mail message is dealt with at any one time.  If a mail message is already
being sent or recieved, then the new message will be queued until it has
finished.

The cluster mail is automatically deleted after 30 days unless the sysop
sets the "keep" flag using the <em>msg</em> command.

<sect1>Personal mail

<P>
Personal mail is sent using the <em>sp</em> command.  This is actually the
default method of sending mail and so a simple <em>s</em> for send will do.
A full list of the send commands and options is in the <em>command set</em>
section, so I will not duplicate them here.

<sect1>Bulletin mail

<P>
Bulletin mail is sent by using the <em>sb</em> command.  This is one of the
most common mistakes users make when sending mail.  They send a bulletin
mail with <em>s</em> or <em>sp</em> instead of <em>sb</em> and of course
the message never leaves the cluster.  This can be rectified by the sysop
by using the <em>msg</em> command.

<P>Bulletin addresses can be set using the Forward.pl file.

<sect1>Forward.pl

<P>
DXSpider receives all and any mail sent to it without any alterations needed
in files.  Because personal and bulletin mail are treated differently, there
is no need for a list of accepted bulletin addresses.  It is necessary, however,
to tell the program which links accept which bulletins.  For example, it is
pointless sending bulletins addresses to "UK" to any links other than UK
ones.  The file that does this is called forward.pl and lives in /spider/msg.
At default, like other spider files it is named forward.pl.issue.  Rename it
to forward.pl and edit the file to match your requirements.
The format is below ...

<tscreen><verb>
#
# this is an example message forwarding file for the system
#
# The format of each line is as follows
#
#     type    to/from/at pattern action  destinations
#     P/B/F     T/F/A     regex   I/F    [ call [, call ...] ]
#
# type: P - private, B - bulletin (msg), F - file (ak1a bull)
# to/from/at: T - to field, F - from field, A - home bbs, O - origin 
# pattern: a perl regex on the field requested
# action: I - ignore, F - forward
# destinations: a reference to an array containing node callsigns
#
# if it is non-private and isn't in here then it won't get forwarded 
#
# Currently only type B msgs are affected by this code.
# 
# The list is read from the top down, the first pattern that matches
# causes the action to be taken.
#
# The pattern can be undef or 0 in which case it will always be selected
# for the action specified
#
# If the BBS list is undef or 0 and the action is 'F' (and it matches the
# pattern) then it will always be forwarded to every node that doesn't have 
# it (I strongly recommend you don't use this unless you REALLY mean it, if
# you allow a new link with this on EVERY bull will be forwarded immediately
# on first connection)
#

package DXMsg;

@forward = (
'B',    'T',    'LOCAL',        'F',    [ qw(GB7MBC) ],
'B',    'T',    'ALL',          'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'UK',           'F',    [ qw(GB7BAA GB7ADX) ],
'B',    'T',    'QSL',          'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'QSLINF',       'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'DX',           'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'DXINFO',       'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'DXNEWS',       'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'DXQSL',        'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
'B',    'T',    'SYSOP',        'F',    [ qw(GB7BAA GB7ADX) ],
'B',    'T',    '50MHZ',        'F',    [ qw(GB7BAA GB7ADX PA4AB-14) ],
);
</verb></tscreen>

Simply insert a bulletin address and state in the brackets where you wish
that mail to go.  For example, you can see here that mail sent to "UK" will
only be sent to the UK links and not to PA4AB-14.

<P>
To force the cluster to reread the file use load/forward


<sect1>The msg command

<P>
The <em>msg</em> command is a very powerful and flexible tool for the
sysop.  It allows the sysop to alter to and from fields and make other
changes to manage the cluster mail.

Here is a full list of the various options ...

<tscreen><verb>
  MSG TO <msgno> <call>     - change TO callsign to <call>
  MSG FRom <msgno> <call>   - change FROM callsign to <call>
  MSG PRrivate <msgno>      - set private flag
  MSG NOPRrivate <msgno>    - unset private flag
  MSG RR <msgno>            - set RR flag
  MSG NORR <msgno>          - unset RR flag
  MSG KEep <msgno>          - set the keep flag (message won't be deleted ever)
  MSG NOKEep <msgno>        - unset the keep flag
  MSG SUbject <msgno> <new> - change the subject to <new>
  MSG WAittime <msgno>      - remove any waiting time for this message
  MSG NOREad <msgno>        - mark message as unread
  MSG REad <msgno>          - mark message as read
  MSG QUeue                 - queue any outstanding bulletins
  MSG QUeue 1               - queue any outstanding private messages
</verb></tscreen>

These commands are simply typed from within the cluster as the sysop user.

<sect1>Message status

<P>
You can check on a message from within the cluster by using the command
<em>stat/msg</em>.  This will give you additional information on the
message number including which nodes have received it, which node it
was received from and when etc.  Here is an example of the output of
the command ...

<tscreen><verb>
G0VGS de GB7MBC 28-Jan-2001 1308Z >
stat/msg 6869
        From: GB7DJK
    Msg Time: 26-Jan-2001 1302Z
       Msgno: 6869
      Origin: GB7DJK
        Size: 8012
     Subject: AMSAT 2line KEPS 01025.AMSAT
          To: UK
Got it Nodes: GB7BAA, GB7ADX
     Private: 0
Read Confirm: 0
  Times read: 0
G0VGS de GB7MBC 28-Jan-2001 1308Z >
</verb></tscreen>

<sect1>Filtering mail

<P>
This is described in the section on <em>Other filters</em> so I will not
duplicate it here.

<sect1>Distribution lists

<P>
Distribution lists are simply a list of users to send certain types of
mail to.  An example of this is mail you only wish to send to other
sysops.  In /spider/msg there is a directory called <em>distro</em>.  You
put any distibution lists in here.  For example, here is a file called
SYSOP.pl that caters for the UK sysops.

<tscreen><verb>
qw(GB7TLH GB7DJK GB7DXM GB7CDX GB7BPQ GB7DXN GB7MBC GB7MBC-6 GB7MDX
   GB7NDX GB7SDX GB7TDX GB7UDX GB7YDX GB7ADX GB7BAA GB7DXA GB7DXH 
   GB7DXK GB7DXI GB7DXS)
</verb></tscreen>

Any mail sent to "sysop" would only be sent to the callsigns in this list.

<sect1>BBS interface

<P>
Spider provides a simple BBS interface.  No input is required from the sysop
of the cluster at all.  The BBS simply sets the cluster as a BBS and pushes
any required mail to the cluster.  No mail can flow from Spider to the BBS,
the interface is one-way.

<P>
Please be careful not to flood the cluster network with unnecessary mail.
Make sure you only send mail to the clusters that want it by using the
Forward.pl file very carefully.

<sect>Scripts

<p>
From 1.48 onwards it will become increasingly possible to control DXSpider's
operation with scripts of various kinds.

<P>
The directory /spider/scripts is where it all happens and is used for several 
things.  Firstly it contains a file called startup that can be used to call 
in any changes to the cluster from the default settings on startup.  This
script is executed immediately after all initialisation of the node is done
but before any connections are possible.  Examples of this include how many 
spots it is possible to get with the sh/dx command, whether you want 
registration/passwords to be permanently on etc.  An example file is shown 
below and is included in the distribution as startup.issue.

<tscreen><verb>
#
# startup script example
#
# set maximum no of spots allowed to 100
# set/var $Spot::maxspots = 1
#
# Set registration on
# set/var $main::reqreg = 1
#
# Set passwords on
# set/var $main::passwdreq = 1
#
</verb></tscreen>

<P>
As usual, any text behind a # is treated as a comment and not read.

Secondly, it is used to store the login scripts for users and nodes.  Currently
this can only be done by the sysop but it is envisaged that eventually users will 
be able to set their own.  An example is included in the distibution but here is 
a further example.

<tscreen><verb>
#
# G0FYD
#
blank +
sh/wwv 3
blank +
sh/dx 
blank +
t g0jhc You abt?
blank +
</verb></tscreen>

The lines in between commands can simply insert a blank line or a character
such as a + sign to make the output easier to read.  Simply create this script
with your favourite editor and save it with the callsign of the user as the
filename.  Filenames should always be in lower case.

<P>
Commands can be inserted in the same way for nodes.  A node may wish a series
of commands to be issued on login, such as a merge command for example.

<P>
Thirdly, there are 2 default scripts for users and nodes who do not have a
specifically defined script.  These are <em>user_default</em> and
<em>node_default</em>

<sect>Databases

<P>
Spider allows the creation of local or remote databases.  It supports
chained databases, allowing several different databases to be scanned
with one simple command.  Importing of databases is limited at present
to the standard AK1A databases such as OBLAST and the DB0SDX QSL 
database but will expand with time.

<sect1>Creating databases

<P>
Creating a database could not be more simple.  All the commands are
sent from the cluster prompt as the <em>sysop</em> user.

To create a database you use the command <em>dbcreate</em>.  It can
be used in 3 different ways like so ..

<tscreen><verb>
dbcreate <name>
</verb></tscreen>

To simply create a database locally, you just tell the command the
name of the database.  This does not create the actual database, it
simply defines it to say that it exists.

<tscreen><verb>
dbcreate <name> chain <name> [<name>...]
</verb></tscreen>

This creates a chained database entry.  The first database will be
scanned, then the second, the third etc...

<tscreen><verb>
dbcreate <name> remote <name>
</verb></tscreen>

This creates a remote entry.  the first name field is the database
name at the remote node, then the remote switch, then the actual
node_call of the remote node, for example...

<tscreen><verb>
dbcreate buckmaster remote gb7dxc
</verb></tscreen>

Remote databases cannot be chained, however, the last database in a
chain can be a remote database.

<sect1>Importing databases

<P>
The only databases that Spider can currently import are the standard
AK1A databases such as OBLAST or the DB0SDX qsl and address database.
This will be added to with time.

To import such a database, first put the file somewhere useful like /tmp
and then issue the following command ...

<tscreen><verb>
dbimport oblast /tmp/OBLAST.FUL
</verb></tscreen>

This will update the existing local oblast database or create it if
it does not exist.

<sect1>Checking available databases

<P>
Once a database is created, you will want to check that it has been
added.  To do this use the <em>dbavail</em> command.  This will
output the available databases.  For example ...

<tscreen><verb>
dbavail
DB Name          Location   Chain
qsl              Local
buck             GB7ADX
hftest           GB7DXM
G0VGS de GB7MBC  3-Feb-2001 1925Z >
</verb></tscreen>

<sect1>Looking up databases

<P>
To look for information in a defined database, simply use the <em>dbshow</em>
command, for example ...

<tscreen><verb>
dbshow buckmaster G0YLM
</verb></tscreen>

will show the information for the callsign G0YLM from the buckmaster
database if it exists.  To make things more standard for the users
you can add an entry in the Aliases file so that it looks like a standard 
<em>show</em> command like this ...

<tscreen><verb>
'^sh\w*/buc', 'dbshow buckmaster', 'dbshow',
</verb></tscreen>

Now you can simply use show/buckmaster or an abreviation.

<sect1>Removing databases

<P>
To delete an existing database you use the <em>dbremove</em> command.
For example ...

<tscreen><verb>
dbremove oblast
</verb></tscreen>

would remove the oblast database and its associated datafile from the
system.  There are no warnings or recovery possible from this command.
If you remove a database it ceases to exist and would have to be created
from scratch if you still required it.

<sect>Information, files and useful programs

<sect1>MOTD

<P>
One of the more important things a cluster sysop needs to do is to get 
information to his users.  The simplest way to do this is to have a banner 
that is sent to the user on login.  This is know as a "message of the day" 
or "motd".  To set this up, simply create a file in /spider/data called motd 
and edit it to say whatever you want.  It is purely a text file and will be 
sent automatically to anyone logging in to the cluster.

<sect1>MOTD_NOR

<P>
This message of the day file lives in the same directory as the standard
motd file but is only sent to non-registered users.  Once registered they
will receive the same message as any other user.

<sect1>Downtime message

<P>
If for any reason the cluster is down, maybe for upgrade or maintenance but 
the machine is still running, a message can be sent to the user advising them 
of the fact.  This message lives in the /spider/data directory and is called
"offline".  Simply create the file and edit it to say whatever you wish.  
This file will be sent to a user attempting to log into the cluster when
DXSpider is not actually running.

<sect1>Other text messages

<P>
You can set other text messages to be read by the user if they input the file 
name.  This could be for news items or maybe information for new users.  
To set this up, make a directory under /spider called <em>packclus</em>.  
Under this directory you can create files called <em>news</em> or <em>newuser</em>
for example.  In fact you can create files with any names you like.  These can 
be listed by the user with the command ....

<tscreen><verb>
show/files
</verb></tscreen>

They can be read by the user by typing the command ....

<tscreen><verb>
type news
</verb></tscreen>

If the file they want to read is called <em>news</em>.  You could also set 
an alias for this in the Alias file to allow them just to type <em>news</em>

<P>
You can also store other information in this directory, either directly or 
nested under directories.  One use for this would be to store DX bulletins 
such as the OPDX bulletins.  These can be listed and read by the user.  
To keep things tidy, make a directory under /spider/packclus called
<em>bulletin</em>.  Now copy any OPDX or similar bulletins into it.  These 
can be listed by the user in the same way as above using the <em>show/files</em>
command with an extension for the bulletin directory you have just created, 
like this ....

<tscreen><verb>
show/files bulletin
</verb></tscreen>

<P>
An example would look like this ....

<tscreen><verb>
sh/files
bulletin      DIR 20-Dec-1999 1715Z news          1602 14-Dec-1999 1330Z
</verb></tscreen>

You can see that in the files area (basically the packclus directory) there is a 
file called <em>news</em> and a directory called <em>bulletin</em>.  You can 
also see that dates they were created.  In the case of the file <em>news</em>, 
you can also see the time it was last modified, a good clue as to whether the 
file has been updated since you last read it.  To read the file called 
<em>news</em> you would simply issue the command ....

<tscreen><verb>
type news
</verb></tscreen>

To look what is in the bulletin directory you issue the command ....

<tscreen><verb>
show/files bulletin
opdx390      21381 29-Nov-1999 1621Z opdx390.1     1670 29-Nov-1999 1621Z
opdx390.2     2193 29-Nov-1999 1621Z opdx391      25045 29-Nov-1999 1621Z  
opdx392      35969 29-Nov-1999 1621Z opdx393      15023 29-Nov-1999 1621Z  
opdx394      33429 29-Nov-1999 1621Z opdx394.1     3116 29-Nov-1999 1621Z  
opdx395      24319 29-Nov-1999 1621Z opdx396      32647 29-Nov-1999 1621Z
opdx396.1     5537 29-Nov-1999 1621Z opdx396.2     6242 29-Nov-1999 1621Z
opdx397      18433 29-Nov-1999 1621Z opdx398      19961 29-Nov-1999 1621Z  
opdx399      17719 29-Nov-1999 1621Z opdx400      19600 29-Nov-1999 1621Z
opdx401      27738 29-Nov-1999 1621Z opdx402      18698 29-Nov-1999 1621Z
opdx403      24994 29-Nov-1999 1621Z opdx404      15685 29-Nov-1999 1621Z
opdx405      13984 29-Nov-1999 1621Z opdx405.1     4166 29-Nov-1999 1621Z
opdx406      28934 29-Nov-1999 1621Z opdx407      24153 29-Nov-1999 1621Z
opdx408      15081 29-Nov-1999 1621Z opdx409      23234 29-Nov-1999 1621Z
Press Enter to continue, A to abort (16 lines) >
</verb></tscreen>

You can now read any file in this directory using the type command, like this ....

<tscreen><verb>
type bulletin/opdx391
Ohio/Penn DX Bulletin No. 391
The Ohio/Penn Dx PacketCluster
DX Bulletin No. 391
BID: $OPDX.391
January 11, 1999
Editor Tedd Mirgliotta, KB8NW
Provided by BARF-80 BBS Cleveland, Ohio
Online at 440-237-8208 28.8k-1200 Baud 8/N/1 (New Area Code!)
Thanks to the Northern Ohio Amateur Radio Society, Northern Ohio DX
Association, Ohio/Penn PacketCluster Network, K1XN & Golist, WB2RAJ/WB2YQH
& The 59(9) DXReport, W3UR & The Daily DX, K3TEJ, KN4UG, W4DC, NC6J, N6HR,
Press Enter to continue, A to abort (508 lines) >
</verb></tscreen>

The page length will of course depend on what you have it set to!

<sect1>The Aliases file

<P>
You will find a file in /spider/cmd/ called Aliases.  First, copy this file to
/spider/local_cmd/Aliases and edit this file.  You will see something like this ...

<tscreen><verb>

#!/usr/bin/perl

# provide some standard aliases for commands for terminally
# helpless ak1a user (helpless in the sense that they never
# read nor understand help files)

# This file is automagically reloaded if its modification time is 
# later than the one stored in CmdAlias.pm

# PLEASE make this file consistant with reality! (the patterns MUST
# match the filenames!)

# Don't alter this file, copy it into the local_cmd tree and modify it.
# This file will be replaced everytime I issue a new release.

# You only need to put aliases in here for commands that don't work as
# you desire naturally, e.g sh/dx on its own just works as you expect
# so you need not add it as an alias.



package CmdAlias;

%alias = (
    '?' => [
          '^\?', 'apropos', 'apropos',
        ],
    'a' => [
          '^ann.*/full', 'announce full', 'announce', 
          '^ann.*/sysop', 'announce sysop', 'announce',
          '^ann.*/(.*)$', 'announce $1', 'announce',
        ],
        'b' => [
        ],
        'c' => [
        ],
        'd' => [
          '^del', 'kill', 'kill',
          '^del\w*/fu', 'kill full', 'kill',
          '^di\w*/a\w*', 'directory all', 'directory',
          '^di\w*/b\w*', 'directory bulletins', 'directory',
          '^di\w*/n\w*', 'directory new', 'directory',
          '^di\w*/o\w*', 'directory own', 'directory',
          '^di\w*/s\w*', 'directory subject', 'directory',
          '^di\w*/t\w*', 'directory to', 'directory',
          '^di\w*/f\w*', 'directory from', 'directory',
          '^di\w*/(\d+)', 'directory $1', 'directory',
        ],
        'e' => [
        ],
        'f' => [
        ],
        'g' => [
        ],
        'h' => [
        ],
        'i' => [
        ],
        'j' => [
        ],
        'k' => [
        ],
        'l' => [
          '^l$', 'directory', 'directory',
          '^ll$', 'directory', 'directory',
          '^ll/(\d+)', 'directory $1', 'directory',
        ],
        'm' => [
        ],
        'n' => [
          '^news', 'type news', 'type',
        ],
        'o' => [
        ],
        'p' => [
        ],
        'q' => [
          '^q', 'bye', 'bye',
        ],
        'r' => [        
          '^r$', 'read', 'read',
          '^rcmd/(\S+)', 'rcmd $1', 'rcmd',
        ],
        's' => [
          '^s/p$', 'send', 'send',
          '^sb$', 'send noprivate', 'send',
          '^set/home$', 'set/homenode', 'set/homenode',
          '^set/nobe', 'unset/beep', 'unset/beep',
          '^set/nohe', 'unset/here', 'unset/here',
          '^set/noan', 'unset/announce', 'unset/announce',
          '^set/nodx', 'unset/dx', 'unset/dx',
          '^set/nota', 'unset/talk', 'unset/talk',
          '^set/noww', 'unset/wwv', 'unset/wwv',
          '^set/nowx', 'unset/wx', 'unset/wx',
          '^sh$', 'show', 'show',
          '^sh\w*/buck', 'dbshow buck', 'dbshow',
          '^sh\w*/bu', 'show/files bulletins', 'show/files',
          '^sh\w*/c/n', 'show/configuration nodes', 'show/configuration',
          '^sh\w*/c$', 'show/configuration', 'show/configuration',
          '^sh\w*/com', 'dbavail', 'dbavail',
          '^sh\w*/dx/(\d+)-(\d+)', 'show/dx $1-$2', 'show/dx',
          '^sh\w*/dx/(\d+)', 'show/dx $1', 'show/dx',
          '^sh\w*/dx/d(\d+)', 'show/dx from $1', 'show/dx',
          '^sh\w*/email', 'dbshow email', 'dbshow',
          '^sh\w*/hftest', 'dbshow hftest', 'dbshow',
          '^sh\w*/vhftest', 'dbshow vhftest', 'dbshow',
          '^sh\w*/qsl', 'dbshow qsl', 'dbshow',
          '^sh\w*/tnc', 'who', 'who',
          '^sh\w*/up', 'show/cluster', 'show/cluster',
          '^sh\w*/w\w*/(\d+)-(\d+)', 'show/wwv $1-$2', 'show/wwv',
          '^sh\w*/w\w*/(\d+)', 'show/wwv $1', 'show/wwv',
          '^sp$', 'send', 'send',
        
    ],
        't' => [
          '^ta$', 'talk', 'talk',
          '^t$', 'talk', 'talk',
        ],
        'u' => [
        ],
        'v' => [
        ],
        'w' => [
          '^wx/full', 'wx full', 'wx',
          '^wx/sysop', 'wx sysop', 'wx',
        ],
        'x' => [
        ],
        'y' => [
        ],
        'z' => [
        ],
)
</verb></tscreen>

You can create aliases for commands at will.  Beware though, these may not 
always turn out as you think.  Care is needed and you need to test the 
results once you have set an alias.

<sect1>Console.pl

<P>
In later versions of Spider a simple console program is provided for the sysop.  
This has a type ahead buffer with line editing facilities and colour for spots,
announces etc.  To use this program, simply use console.pl instead of client.

<P>
To edit the colours, copy /spider/perl/Console.pl to /spider/local and edit the 
file with your favourite editor.

<sect1>Updating kepler data

<P>
Spider has a powerful and flexible show/satellite command.  In order for
this to be accurate, the kepler data has to be updated regularly.  In
general, this data is available as an email or via cluster mail.
Updating it is simple.  First you need to export the mail message as a
file.  You do this with the <em>export</em> command from the cluster prompt
as the sysop.  For example ...

<tscreen><verb>
export 5467 /spider/perl/keps.in
</verb></tscreen>

would export message number 5467 as a file called keps.in in the
/spider/perl directory.

Now login to a VT as sysop and cd /spider/perl.  There is a command in
the perl directory called <em>convkeps.pl</em>.  All we need to do now is
convert the file like so ...

<tscreen><verb>
./convkeps.pl keps.in
</verb></tscreen>

Now go back to the cluster and issue the command ...

<tscreen><verb>
load/keps
</verb></tscreen>

That is it!  the kepler data has been updated.

<sect1>The QRZ callbook

<P>
The command <em>sh/qrz</em> will only work once you have followed a few
simple steps.  First you need to get a user ID and password from qrz.com.
Simply go to the site and create one.  Secondly you need to copy the file
/spider/perl/Internet.pm to /spider/local and alter it to match your user
ID and password.  You also at this point need to set $allow=1 to complete
the setup.  Many thanks to Fred Lloyd, the proprieter of
<htmlurl url="http://www.qrz.com" name="qrz.com"> for allowing this access.

<sect>Security

<P>
From version 1.49 DXSpider has some additional security features.  These
are not by any means meant to be exhaustive, however they do afford some
security against piracy.  These two new features can be used independently 
of each other or in concert to tighten the security.

<sect1>Registration

<P>
The basic principle of registration is simple.  If a user is not registered
by the sysop, then they have read-only access to the cluster.  The only
thing they can actually send is a talk or a message to the sysop.  In
order for them to be able to spot, send announces or talks etc the sysop
must register them with the <em>set/register</em> command, like this ...

<tscreen><verb>
set/register g0vgs
</verb></tscreen>

The user g0vgs can now fully use the cluster.  In order to enable 
registration, you can issue the command ...

<tscreen><verb>
set/var $main::reqreg = 1
</verb></tscreen>

Any users that are not registered will now see the motd_nor file rather
than the motd file as discussed in the Information, files and useful 
programs section.

<P>
Entering this line at the prompt will only last for the time the cluster
is running of course and would not be present on a restart.  To make the
change permanent, add the above line to /spider/scripts/startup.  To
read more on the startup file, see the section on Information, files 
and useful programs.

<P>
To unregister a user use <em>unset/register</em> and to show the list
of registered users, use the command <em>show/register</em>.

<sect1>Passwords

<P>
At the moment, passwords only affect users who login to a DXSpider
cluster node via telnet.  If a user requires a password, they can
either set it themselves or have the sysop enter it for them by using
the <em>set/password</em> command.  Any users who already have passwords, 
such as remote sysops, will be asked for their passwords automatically 
by the cluster.  Using passwords in this way means that the user has a
choice on whether to have a password or not.  To force the use of
passwords at login, issue the command ...

<tscreen><verb>
set/var $main::passwdreq = 1
</verb></tscreen>

at the cluster prompt.  This can also be added to the /spider/scripts/startup
file as above to make the change permanent.

<P>
Of course, if you do this you will have to assign a password for each of 
your users.  If you were asking them to register, it is anticipated that
you would ask them to send you a message both to ask to be registered and
to give you the password they wish to use.

<P>
Should a user forget their password, it can be reset by the sysop by
first removing the existing password and then setting a new one like so ...

<tscreen><verb>
unset/password g0vgs
set/password g0vgs new_password
</verb></tscreen>

<sect>CVS

<P>
CVS stands for "Concurrent Versions System" and the CVS for DXSpider is held
at <htmlurl url="http://www.sourceforge.net" name="Sourceforge">.  This means
that it is possible to update your DXSpider installation to the latest
sources by using a few simple commands.

<P>
Please be aware that if you update your system using CVS, it is possible that
you could be running code that is very beta and not fully tested.  There is
a possibility that it could be unstable.

<P>
I am of course assuming that you have a machine with both DXSpider and
Internet access running.

<P>
BEFORE YOU EVEN CONSIDER STARTING WITH THIS MAKE A BACKUP OF YOUR
ENTIRE SPIDER TREE!!

<P>
Assuming you are connected to the Internet, you need to login to the
CVS repository and then update your Spider source.  There are several
steps which are listed below ...

<P>
First login as the user <em>sysop</em>.  Next you need to connect to the CVS
repository.  You do this with the command below ...

<verb>
cvs -d:pserver:anonymous@cvs.DXSpider.sourceforge.net:/cvsroot/dxspider login 
</verb>

You will get a password prompt.  Simply hit return here and your machine should
return to a normal linux prompt.

<P>
What happens next depends on whether you have an existing installation that 
you want to update with the latest and greatest or whether you just want
to see what is there and/or run it on a new machine for testing.

If you are installing Spider from CVS then change directory to /home/sysop

If you are wanting to update Spider then cd to /tmp

<P>
The next step will create a brand new 'spider' directory in your current
directory.

<verb>
cvs -z3 -d:pserver:anonymous@cvs.DXSpider.sourceforge.net:/cvsroot/dxspider co spider
</verb>

This command is all on one line.

<P>
Hopefully your screen should show you downloading files.  The -z3 simply compresses
the download to improve speed.
When this has finished, you will have exactly the same as if you had untarred a full 
tarball PLUS some extra directories and files that CVS needs to do the magic that 
it does.

<P>
Now if you are doing a new installation, that's it.  Carry on as if you have
just downloaded and untarred the lastest tarball.

<P>
If you want to upgrade your current installation then do this ...

<tscreen><verb>
tar cvfz /tmp/s.tgz spider
cd /
tar xvfzp /tmp/s.tgz
</verb></tscreen>

This is assuming you downloaded to the /tmp directory of course.

<P>
NOTE:  the 'p' on the end of the 'xvfz' is IMPORTANT!   It keeps the permissions
correct.  YOU WERE LOGGED IN AS THE USER SYSOP WEREN'T YOU?????

Remember to recompile the C client (cd /spider/src; make)

<P>
At this point the files have been upgraded.  You can (usually) restart the cluster
in your own time.  However, if you attempt to use any new commands or features
expect it to be fatal!  At least your cluster will have been restarted then so it
will be too late to worry about it!

<P>
Now the magic part!  From now on when you want to update, simply connect to the 
Internet and then, as the user <em>sysop</em> ...

<tscreen><verb>
cd /spider
cvs -z3 update -d
</verb></tscreen>

and your files will be updated.  As above, remember to recompile the "C" client 
if it has been updated (CVS will tell you) and restart if any of the perl scripts
have been altered or added, again, CVS will tell you.

<P>
You will find any changes documented in the /spider/Changes file.

<sect>The DXSpider command set

<P>
Below is a complete list of commands available from the cluster prompt.
Most maintenance tasks are automatic but there are some commands that are useful 
for a sysop.  These are listed below in alphabetical order.  The number in 
brackets following the command name is the permissions level needed to use 
the command.

<sect1>accept/announce (0)

<P>
<tt>
<bf>accept/announce &lsqb;0-9&rsqb; &lt;pattern&gt;</bf> Set an accept filter
 line for announce
</tt>

<P>
Create an 'accept this announce' line for a filter. 

An accept filter line means that if the announce matches this filter it is
passed onto the user. See HELP FILTERS for more info. Please read this
to understand how filters work - it will save a lot of grief later on.

You can use any of the following things in this line:-

<tscreen><verb>
  info <string>            eg: iota or qsl
  by <prefixes>            eg: G,M,2         
  origin <prefixes>
  origin_dxcc <numbers>    eg: 61,62 (from eg: sh/pre G)
  origin_itu <numbers>
  origin_zone <numbers>
  by_dxcc <numbers>
  by_itu <numbers>
  by_zone <numbers>
  channel <prefixes>
  wx 1                     filter WX announces
  dest <prefixes>          eg: 6MUK,WDX      (distros)
</verb></tscreen>

some examples:-

<tscreen><verb>
  acc/ann dest 6MUK
  acc/ann 2 by_zone 14,15,16
  (this could be all on one line: acc/ann dest 6MUK or by_zone 14,15,16)
</verb></tscreen>

or

<tscreen><verb>
  acc/ann by G,M,2 
</verb></tscreen>

This filter would only allow announces that were posted buy UK stations.  
You can use the tag 'all' to accept everything eg:

<tscreen><verb>
  acc/ann all
</verb></tscreen>

but this probably for advanced users...

<sect1>accept/announce (extended for sysops) (8)

<P>
<tt>
<bf>accept/announce &lt;call&gt; &lsqb;input&rsqb; &lsqb;0-9&rsqb;&lt;pattern&gt;</bf> Announce filter sysop version
</tt>

<P>
This version allows a sysop to set a filter for a callsign as well as the
default for nodes and users eg:-

<tscreen><verb>
  accept/ann by G,M,2
  accept/ann input node_default by G,M,2
  accept/ann user_default by G,M,2
</verb></tscreen>

<sect1>accept/route (8)

<P>
<tt>
<bf>accept/route &lt;call&gt; &lsqb;0-9&rsqb; &lt;pattern&gt;</bf> Set an 'accept' filter line for routing
</tt>

<P>
Create an 'accept this routing PC Protocol' line for a filter. 

<P>
An accept filter line means that if a PC16/17/19/21/24/41/50 matches this filter 
it is passed thru that interface. See HELP FILTERING for more info. Please read this
to understand how filters work - it will save a lot of grief later on.

<P>
You can use any of the following things in this line:-

<tscreen><verb>
  call <prefixes>        the callsign of the thingy
  call_dxcc <numbers>    eg: 61,62 (from eg: sh/pre G)
  call_itu <numbers>
  call_zone <numbers>
  origin <prefixes>      really the interface it came in on
  origin_dxcc <numbers>    eg: 61,62 (from eg: sh/pre G)
  origin_itu <numbers>
  origin_zone <numbers>
</verb></tscreen>

<P>
some examples:-

<tscreen><verb>
  acc/route gb7djk call_dxcc 61,38 (send only UK+EIRE nodes)
  acc/route gb7djk call gb7djk     (equiv to SET/ISOLATE)
</verb></tscreen>

<P>
You can use the tag 'all' to accept everything eg:

<tscreen><verb>
  acc/route all
</verb></tscreen>

<sect1>accept/spots (0)

<P>
<tt>
<bf>accept/announce &lsqb;0-9&rsqb; &lt;pattern&gt;</bf> Set an accept filter 
line for spots
</tt>

<P>
Create an 'accept this spot' line for a filter.

<P>
An accept filter line means that if the spot matches this filter it is
passed onto the user. See HELP FILTERS for more info. Please read this
to understand how filters work - it will save a lot of grief later on.

You can use any of the following things in this line:-

<tscreen><verb>
  freq <range>           eg: 0/30000 or hf or hf/cw or 6m,4m,2m
  on <range>             same as 'freq'
  call <prefixes>        eg: G,PA,HB9
  info <string>          eg: iota or qsl
  by <prefixes>            
  call_dxcc <numbers>    eg: 61,62 (from eg: sh/pre G)
  call_itu <numbers>
  call_zone <numbers>
  by_dxcc <numbers>
  by_itu <numbers>
  by_zone <numbers>
  origin <prefixes>
  channel <prefixes>
</verb></tscreen>

<P>
For frequencies, you can use any of the band names defined in
SHOW/BANDS and you can use a subband name like: cw, rtty, data, ssb -
thus: hf/ssb. You can also just have a simple range like: 0/30000 -
this is more efficient than saying simply: freq HF (but don't get
too hung up about that)

some examples:-

<tscreen><verb>
  acc/spot 1 on hf/cw
  acc/spot 2 on vhf and (by_zone 14,15,16 or call_zone 14,15,16)
</verb></tscreen>

You can use the tag 'all' to accept everything, eg:

<tscreen><verb>
  acc/spot 3 all
</verb></tscreen>

but this probably for advanced users...

<sect1>accept/spots (extended for sysops) (8)

<P>
<tt>
<bf>accept/spots &lt;call&gt; &lsqb;input&rsqb; &lsqb;0-9&rsqb; &lt;pattern&gt;</bf> Spot filter sysop version
</tt>

<P>
This version allows a sysop to set a filter for a callsign as well as the
default for nodes and users eg:-

<tscreen><verb>
  accept/spot db0sue-7 1 by_zone 14,15,16
  accept/spot node_default all
  set/hops node_default 10

  accept/spot user_default by G,M,2
</verb></tscreen>

<sect1>accept/wcy (0)

<P>
<tt>
<bf>accept/wcy &lsqb;0-9&rsqb; &lt;pattern&gt;</bf> set an accept WCY filter
</tt>

<P>
It is unlikely that you will want to do this, but if you do then you can
filter on the following fields:-

<tscreen><verb>
  by <prefixes>            eg: G,M,2         
  origin <prefixes>
  origin_dxcc <numbers>    eg: 61,62 (from eg: sh/pre G)
  origin_itu <numbers>
  origin_zone <numbers>
  by_dxcc <numbers>
  by_itu <numbers>
  by_zone <numbers>
  channel <prefixes>
</verb></tscreen>

<P>
There are no examples because WCY Broadcasts only come from one place and
you either want them or not (see UNSET/WCY if you don't want them).

This command is really provided for future use.

See HELP FILTER for information.

<sect1>accept/wcy (extended for sysops) (8)

<P>
<tt>
<bf>accept/wcy &lt;call&gt; &lsqb;input&rsqb; &lsqb;0-9&rsqb; &lt;pattern&gt;</bf>
WCY filter sysop version
</tt>

<P>
This version allows a sysop to set a filter for a callsign as well as the
default for nodes and users eg:-

<tscreen><verb>
  accept/wcy node_default all
  set/hops node_default 10
</verb></tscreen>

<sect1>accept/wwv (0)

<P>
<tt>
<bf>accept/wwv &lsqb;0-9&rsqb; &lt;pattern&gt;</bf> Set an accept WWV filter
</tt>

<P>
It is unlikely that you will want to do this, but if you do then you can
filter on the following fields:-

<tscreen><verb>
  by <prefixes>            eg: G,M,2         
  origin <prefixes>
  origin_dxcc <numbers>    eg: 61,62 (from eg: sh/pre G)
  origin_itu <numbers>
  origin_zone <numbers>
  by_dxcc <numbers>
  by_itu <numbers>
  by_zone <numbers>
  channel <prefixes>
</verb></tscreen>

for example 

<tscreen><verb>
  accept/wwv by_zone 4
</verb></tscreen>

is probably the only useful thing to do (which will only show WWV broadcasts
by stations in the US).

See HELP FILTER for information.

<sect1>accept/wwv (extended for sysops) (8)

<P>
<tt>
<bf>accept/wwv &lt;call&gt; &lsqb;input&rsqb; &lsqb;0-9&rsqb; &lt;pattern&gt;</bf>
WWV filter sysop version
</tt>

<P>
This version allows a sysop to set a filter for a callsign as well as the
default for nodes and users eg:-

<tscreen><verb>
  accept/wwv db0sue-7 1 by_zone 4
  accept/wwv node_default all
  set/hops node_default 10

  accept/wwv user_default by W,K
</verb></tscreen>

<sect1>announce (0)

<P>
<tt>
<bf>announce &lt;text&gt;</bf> Send an announcement to local users
</tt>

<P>
Send an announcement to LOCAL users only, where &lt;text&gt; is the text 
of the announcement you wish to broadcast.  If you do not wish to receive
announces, use the <em>set/noannounce</em> command.  Any announces made by
a sysop will override set/noannounce.

<sect1>announce full (0)

<P>
<tt>
<bf>announce full &lt;text&gt;</bf> Send an announcement cluster wide
</tt>

<P>
This command will send your announcement across the whole cluster
network.


<sect1>announce sysop (5)

<P>
<tt>
<bf>announce sysop &lt;text&gt;</bf>
</tt>

<P>
Send an announcement to Sysops only

<sect1>apropos (0)

<P>
<tt>
<bf>apropos &lt;string&gt;</bf> Search the help database
</tt>

<P>
Search the help database for &lt;string&gt; (it isn't case sensitive), 
and print the names of all the commands that may be relevant.

<sect1>bye (0)

<P>
<tt>
<bf>bye</bf> Exit from the cluster
</tt>

<P>
This will disconnect you from the cluster

<sect1>catchup (5)

<P>
<tt>
<bf>catchup &lt;node_call&gt; All&verbar;&lsqb;&lt;msgno&gt; ...&rsqb;</bf> 
Mark a message as sent
</tt>

<P>
When you send messages the fact that you have forwarded it to another node 
is remembered so that it isn't sent again. When you have a new partner
node and you add their callsign to your /spider/msg/forward.pl file, all
outstanding non-private messages will be forwarded to them. This may well
be ALL the non-private messages. You can prevent this by using these 
commmands:-

<tscreen><verb>
  catchup GB7DJK all
  catchup GB7DJK 300 301 302 303 500-510
</verb></tscreen>
        
and to undo what you have just done:-
  
<tscreen><verb>
  uncatchup GB7DJK all
  uncatchup GB7DJK 300 301 302 303 500-510
</verb></tscreen>

which will arrange for them to be forward candidates again.

Order is not important.

<sect1>clear/announce (8)

<P>
<tt>
<bf>clear/announce &lsqb;input&rsqb; &lt;callsign&gt; &lsqb;0-9&verbar;all&rsqb;</bf> Clear an announce filter line
</tt>

<P>
A sysop can clear an input or normal output filter for a user or the
node_default or user_default. 

<sect1>clear/route (8)

<P>
<tt>
<bf>clear/route &lsqb;input&rsqb; ^lt;callsign&gt; &lsqb;0-9&verbar;all&rsqb;</bf> Clear a route filter line
</tt>

<P>
This command allows you to clear (remove) a line in a route filter or to 
remove the whole filter.

see CLEAR/SPOTS for a more detailed explanation.

A sysop can clear an input or normal output filter for a user or the
node_default or user_default. 

<sect1>clear/spots (0)

<P>
<tt>
<bf>clear/spots &lsqb;1&verbar;all&rsqb;</bf> Clear a spot filter line
</tt>

<P>
This command allows you to clear (remove) a line in a spot filter or to 
remove the whole filter.

If you have a filter:-

<tscreen><verb>
  acc/spot 1 on hf/cw
  acc/spot 2 on vhf and (by_zone 14,15,16 or call_zone 14,15,16)
</verb></tscreen>

and you say:-

<tscreen><verb>
  clear/spot 1
</verb></tscreen>

you will be left with:-

<tscreen><verb>
  acc/spot 2 on vhf and (by_zone 14,15,16 or call_zone 14,15,16)
</verb></tscreen>

If you do:

<tscreen><verb>
  clear/spot all
</verb></tscreen>

the filter will be completely removed.

<sect1>clear/spots (extended for sysops) (8)

<P>
<tt>
<bf>clear/spots &lsqb;input&rsqb; &lt;callsign&gt; &lsqb;0-9&verbar;all&rsqb;</bf> Clear a spot filter line
</tt>

<P>
A sysop can clear an input or normal output filter for a user or the
node_default or user_default. 

<sect1>clear/wcy (0)

<P>
<tt>
<bf>clear/wcy &lsqb;1&verbar;all&rsqb;</bf> Clear a WCY filter line
</tt>

<P>
This command allows you to clear (remove) a line in a WCY filter or to 
remove the whole filter.

see CLEAR/SPOTS for a more detailed explanation.

<sect1>clear/wcy (extended for sysops) (8)

<P>
<tt>
<bf>clear/wcy &lsqb;input&rsqb; &lt;callsign&gt; &lsqb;0-9&verbar;all&rsqb;</bf> Clear a WCY filter line
</tt>

<P>
A sysop can clear an input or normal output filter for a user or the
node_default or user_default. 

<sect1>clear/wwv (0)

<P>
<tt>
<bf>clear/wwv &lsqb;1&verbar;all&rsqb;</bf> Clear a WWV filter line
</tt>

<P>
This command allows you to clear (remove) a line in a WWV filter or to
remove the whole filter.

see CLEAR/SPOTS for a more detailed explanation.

<sect1>clear/wwv (extended for sysops) (8)

<P>
<tt>
<bf>clear/wwv &lsqb;input&rsqb; &lt;callsign&gt; &lsqb;0-9&verbar;all&rsqb;</bf> Clear a WWV filter line
</tt>

<P>
A sysop can clear an input or normal output filter for a user or the
node_default or user_default.

<sect1>connect (5) 

<P>
<tt>
<bf>connect &lt;callsign&gt;</bf> Start a connection to another DX Cluster
</tt>

<P>
Start a connection process that will culminate in a new connection to the
DX cluster &lt;callsign&gt;. This process creates a new 'client' process which will
use the script in /spider/connect/&lt;callsign&gt; to effect the 'chat' exchange
necessary to traverse the network(s) to logon to the cluster &lt;callsign&gt;.

<sect1>dbavail (0)

<P>
<tt>
<bf>dbavail</bf> Show a list of all the databases in the system
</tt>

<P>
The title says it all really, this command lists all the databases defined
in the system. It is also aliased to SHOW/COMMAND.

<sect1>dbcreate (9)

<P>
<tt>
<bf>dbcreate &lt;name&gt;</bf> Create a database entry<newline>
<bf>dbcreate &lt;name&gt; chain &lt;name&gt; [&lt;name&gt;..]</bf> Create a 
chained database entry<newline>
<bf>dbcreate &lt;name&gt; remote &lt;node&gt;</bf> Create a remote database
entry<newline>
</tt>

<P>
DBCREATE allows you to define a database in the system. It doesn't actually
create anything, just defines it.

The databases that are created are simple DB_File hash databases, they are 
therefore already 'indexed'.

You can define a local database with the first form of the command eg:

  DBCREATE oblast

You can also chain databases with the addition of the 'chain' keyword. 
This will search each database one after the other. A typical example 
is:

  DBCREATE sdx_qsl chain sql_ad

No checking is done to see if the any of the chained databases exist, in
fact it is usually better to do the above statement first then do each of
the chained databases.

Databases can exist offsite. To define a database that lives on another 
node do:

  DBCREATE buckmaster remote gb7dxc

Remote databases cannot be chained; however, the last database in a 
a chain can be a remote database eg:

  DBCREATE qsl chain gb7dxc

To see what databases have been defined do:

  DBAVAIL (or it will have been aliased to SHOW/COMMAND)

It would be normal for you to add an entry into your local Aliases file
to allow people to use the 'SHOW/&lt;dbname&gt;' style syntax. So you would
need to add a line like:-

<tscreen><verb>
  's' => [
    ..
    ..
    '^sh\w*/buc', 'dbshow buckmaster', 'dbshow',
    ..
    ..
   ],
</verb></tscreen>

to allow 

  SH/BUCK g1tlh

to work as they may be used to.

See DBIMPORT for the importing of existing AK1A format data to databases.
See DBSHOW for generic database enquiry

<sect1>dbimport (9)

<P>
<tt>
<bf>dbimport &lt;dbname&gt;</bf> Import AK1A data into a database
</tt>

<P>
If you want to import or update data in bulk to a database you can use
this command. It will either create or update entries into an existing
database. For example:-

  DBIMPORT oblast /tmp/OBLAST.FUL

will import the standard OBLAST database that comes with AK1A into the
oblast database held locally.

<sect1>dbremove (9)

<P>
<tt>
<bf>dbremove &lt;dbname&gt;</bf> Delete a database
</tt>

<P>
DBREMOVE will completely remove a database entry and also delete any data
file that is associated with it. 

There is no warning, no comeback, no safety net. 

For example:

  DBREMOVE oblast 

will remove the oblast database from the system and it will also remove
the associated datafile.

I repeat:

There is no warning, no comeback, no safety net.

You have been warned.

<sect1>dbshow (0)

<P>
<tt>
<bf>dbshow &lt;dbname&gt; &lt;key&gt;</bf> Display an entry, if it exists, 
in a database
</tt>

<P>
This is the generic user interface to the database to the database system.
It is expected that the sysop will add an entry to the local Aliases file
so that users can use the more familiar AK1A style of enquiry such as:

<tscreen><verb>
  SH/BUCK G1TLH
</verb></tscreen>

but if he hasn't and the database really does exist (use DBAVAIL or
SHOW/COMMAND to find out) you can do the same thing with:

<tscreen><verb>
  DBSHOW buck G1TLH
</verb></tscreen>


<sect1>debug (9)

<P>
<tt>
<bf>debug</bf> Set the cluster program into debug mode
</tt>

<P>
Executing this command will only have an effect if you are running the cluster
in debug mode i.e.

<tscreen><verb>
        perl -d cluster.pl
</verb></tscreen>

It will interrupt the cluster just after the debug command has finished.

<sect1>delete/user (9)

<P>
<tt>
<bf>delete/user &lt;callsign&gt;</bf> Delete a user from the User Database
</tt>

<P>
This command will completely remove a one or more users from the database.

There is NO SECOND CHANCE.

It goes without saying that you should use this command CAREFULLY!


<sect1>directory (0)

<P>
<tt>
<bf>directory</bf> List messages<newline> 
<bf>directory all</bf> List all messages<newline>
<bf>directory own</bf> List your own messages<newline>
<bf>directory new</bf> List all new messages<newline>
<bf>directory to &lt;call&gt;</bf> List all messages to &lt;call&gt;<newline>
<bf>directory from &lt;call&gt;</bf> List all messages from &lt;call&gt;<newline>
<bf>directory subject &lt;string&gt;</bf> List all messages with &lt;string&gt; 
in subject<newline>
<bf>directory &lt;nn&gt;</bf> List last &lt;nn&gt; messages<newline>
<bf>directory &lt;from&gt;-&lt;to&gt;</bf> List messages &lt;from&gt; message &lt;to&gt; message <newline>
</tt>

<P>
List the messages in the messages directory.

If there is a 'p' one space after the message number then it is a 
personal message. If there is a '-' between the message number and the
'p' then this indicates that the message has been read.

You can use shell escape characters such as '*' and '?' in the &lt;call&gt;
fields.

You can combine some of the various directory commands together eg:-

<tscreen><verb>
   DIR TO G1TLH 5
or 
   DIR SUBJECT IOTA 200-250
</verb></tscreen>

You can abbreviate all the commands to one letter and use ak1a syntax:-

<tscreen><verb>
   DIR/T G1* 10
   DIR/S QSL 10-100 5
</verb></tscreen>


<sect1>directory (extended for sysops) (5)

<P>
Works just like the user command except that sysops can see ALL messages.

<sect1>disconnect (8)

<P>
<tt>
<bf>disconnect &lt;call&gt; [&lt;call&gt; ...]</bf> Disconnect a user or node
</tt>

<P>
Disconnect any &lt;call&gt; connected locally

<sect1>dx (0)

<P>
<tt>
<bf>dx &lsqb;by &lt;call&gt;&rsqb; &lt;freq&gt; &lt;call&gt; &lt;remarks&gt;</bf> Send a DX spot
</tt>

<P>
This is how you send a DX Spot to other users. You can, in fact, now
enter the &lt;freq&gt; and the &lt;call&gt; either way round. 

<tscreen><verb>
   DX FR0G 144.600
   DX 144.600 FR0G
   DX 144600 FR0G 
</verb></tscreen>

will all give the same result. You can add some remarks to the end
of the command and they will be added to the spot.

<tscreen><verb>
   DX FR0G 144600 this is a test
</verb></tscreen>

You can credit someone else by saying:-

<tscreen><verb>
   DX by G1TLH FR0G 144.600 he isn't on the cluster
</verb></tscreen>

The &lt;freq&gt; is compared against the available bands set up in the 
cluster.  See SHOW/BANDS for more information.

<sect1>export (9)

<P>
<tt>
<bf>export &lt;msgno&gt; &lt;filename&gt;</bf> Export a message to a file
</tt>

<P>
Export a message to a file. This command can only be executed on a local
console with a fully privileged user. The file produced will be in a form
ready to be imported back into the cluster by placing it in the import 
directory (/spider/msg/import).

This command cannot overwrite an existing file. This is to provide some 
measure of security. Any files written will owned by the same user as the 
main cluster, otherwise you can put the new files anywhere the cluster can
access. For example:-

  EXPORT 2345 /tmp/a

<sect1>export_users (9)

<P>
<tt>
<bf>export_users &lsqb;&lt;filename&gt;&rsqb;</bf> Export the users database to ascii
</tt>

<P>
Export the users database to a file in ascii format. If no filename
is given then it will export the file to /spider/data/user_asc.

If the file already exists it will be renamed to &lt;filename&gt;.o. In fact
up to 5 generations of the file can be kept each one with an extra 'o' on the
suffix. 

BE WARNED: this will write to any file you have write access to. No check is
made on the filename (if any) that you specify.

<sect1>filtering (0)

<P>
<tt>
<bf>filtering</bf> Filtering things in DXSpider
</tt>

<P>
There are a number of things you can filter in the DXSpider system. They
all use the same general mechanism.

In general terms you can create a 'reject' or an 'accept' filter which
can have up to 10 lines in it. You do this using, for example:-
 
  accept/spots .....
  reject/spots .....

where ..... are the specific commands for that type of filter. There
are filters for spots, wwv, announce, wcy and (for sysops)
connects. See each different accept or reject command reference for
more details.

There is also a command to clear out one or more lines in a filter and
one to show you what you have set. They are:-

  clear/spots 1
  clear/spots all

and 
  
  show/filter

There is clear/xxxx command for each type of filter.

For now we are going to use spots for the examples, but you can apply
the principles to all types of filter.

There are two main types of filter 'accept' or 'reject'; which you use
depends entirely on how you look at the world and what is least
writing to achieve what you want. Each filter has 10 lines (of any
length) which are tried in order. If a line matches then the action
you have specified is taken (ie reject means ignore it and accept
means gimme it).

The important thing to remember is that if you specify a 'reject'
filter (all the lines in it say 'reject/spots' (for instance) then if
a spot comes in that doesn't match any of the lines then you will get
it BUT if you specify an 'accept' filter then any spots that don't
match are dumped. For example if I have a one line accept filter:-

  accept/spots on vhf and (by_zone 14,15,16 or call_zone 14,15,16)

then automatically you will ONLY get VHF spots from or to CQ zones 14
15 and 16.  If you set a reject filter like:

  reject/spots on hf/cw

Then you will get everything EXCEPT HF CW spots, If you am interested in IOTA
and will work it even on CW then you could say:-

  reject/spots on hf/cw and not info iota

But in that case you might only be interested in iota and say:-

  accept/spots not on hf/cw or info iota

which is exactly the same. You should choose one or the other until
you are confortable with the way it works. Yes, you can mix them
(actually you can have an accept AND a reject on the same line) but
don't try this at home until you can analyse the results that you get
without ringing up the sysop for help.

You can arrange your filter lines into logical units, either for your
own understanding or simply convenience. I have one set frequently:-

  reject/spots 1 on hf/cw
  reject/spots 2 on 50000/1400000 not (by_zone 14,15,16 or call_zone 14,15,16)  

What this does is to ignore all HF CW spots (being a class B I can't
read any CW and couldn't possibly be interested in HF :-) and also
rejects any spots on VHF which don't either originate or spot someone
in Europe.

This is an exmaple where you would use the line number (1 and 2 in
this case), if you leave the digit out, the system assumes '1'. Digits
'0'-'9' are available.

You can leave the word 'and' out if you want, it is implied. You can
use any number of brackets to make the 'expression' as you want
it. There are things called precedence rules working here which mean
that you will NEED brackets in a situation like line 2 because,
without it, will assume:-

  (on 50000/1400000 and by_zone 14,15,16) or call_zone 14,15,16 

annoying, but that is the way it is. If you use OR - use
brackets. Whilst we are here CASE is not important. 'And BY_Zone' is
just 'and by_zone'.

If you want to alter your filter you can just redefine one or more
lines of it or clear out one line. For example:-

  reject/spots 1 on hf/ssb

or 

  clear/spots 1

To remove the filter in its entirty:-

  clear/spots all

There are similar CLEAR commands for the other filters:-

  clear/announce
  clear/wcy
  clear/wwv

ADVANCED USERS:-

Once you are happy with the results you get, you may like to experiment. 

my example that filters hf/cw spots and accepts vhf/uhf spots from EU
can be written with a mixed filter, eg:

  rej/spot on hf/cw
  acc/spot on 0/30000
  acc/spot 2 on 50000/1400000 and (by_zone 14,15,16 or call_zone 14,15,16)

each filter slot actually has a 'reject' slot and an 'accept'
slot. The reject slot is executed BEFORE the accept slot.

It was mentioned earlier that after a reject test that doesn't match,
the default for following tests is 'accept', the reverse is true for
'accept'. In the example what happens is that the reject is executed
first, any non hf/cw spot is passed to the accept line, which lets
thru everything else on HF.

The next filter line lets through just VHF/UHF spots from EU.

<sect1>forward/latlong (8)

<P>
<tt>
<bf>forward/latlong &lt;node_call&gt;</bf> Send latitude and longitude 
information to another cluster
</tt>

<P>
This command sends all the latitude and longitude information that your
cluster is holding against callsigns.  One advantage of recieving this
information is that more locator information is held by you.  This
means that more locators are given on the DX line assuming you have
<em>set/dxgrid</em> enabled.  This could be a LOT of information though, so
it is not recommended on slow links.

<sect1>forward/opername (1)

<P>
<tt>
<bf>forward/opername &lt;call&gt;</bf> Send out information on this &lt;call&gt; 
to all clusters
</tt>

<P>
This command sends out any information held in the user file which can 
be broadcast in PC41 protocol packets. This information is Name, QTH, Location
and Homenode. PC41s are only sent for the information that is available.

<sect1>help (0)

<P>
<tt>
<bf>help &lt;cmd&gt;</bf> Get help on a command
</tt>

<P>
All commands can be abbreviated, so SHOW/DX can be abbreviated
to SH/DX, ANNOUNCE can be shortened to AN and so on.

Look at the APROPOS &lt;string&gt; command which will search the help database
for the &lt;string&gt; you specify and give you a list of likely commands
to look at with HELP.

<sect1>init (5)

<P>
<tt>
<bf>init &lt;node call&gt;</bf> Re-initialise a link to an AK1A compatible node
</tt>

<P>
This command attempts to re-initialise a link to a (usually) AK1A node
that has got confused, usually by a protocol loop of some kind. It may
work - but you usually will be better off simply disconnecting it (or
better, if it is a real AK1A node, doing an RCMD &lt;node&gt; DISC/F &lt;your
node&gt;).

Best of luck - you will need it.

<sect1>kill (0)

<P>
<tt>
<bf>kill &lt;msgno&gt; &lsqb;&lt;msgno&gt; ..&rsqb;</bf> Delete a message 
from the local system
</tt>

<P>
Delete a message from the local system. You will only be able to
delete messages that you have originated or been sent (unless you are
the sysop).

<sect1>kill (5)

<P>
<tt>
<bf>kill &lt;msgno&gt [&lt;msgno&gt; ...]</bf> Remove or erase a message from 
the system<newline>
<bf>kill from &lt;call&gt;</bf> Remove all messages from a callsign<newline>
<bf>kill to &lt;call&gt;</bf> Remove all messages to a callsign<newline>
</tt>

<P>
You can get rid of any message to or originating from your callsign using 
this command. You can remove more than one message at a time.

As a sysop you can kill any message on the system.

<sect1>kill full (5)

<P>
<tt>
<bf>kill full &lt;msgno&gt; &lsqb;&lt;msgno&gt;&rsqb;</bf> Delete a message from the 
whole cluster
</tt>

<P>
Delete a message (usually a 'bulletin') from the whole cluster system. 

This uses the subject field, so any messages that have exactly the same subject
will be deleted. Beware!

<sect1>kill/expunge (6)

<P>
<tt>
<bf>kill/expunge &lt;msgno&gt; &lsqb;&lt;msgno&gt;..&rsqb;</bf>Expunge a message
</tt>

<P>
Deleting a message using the normal KILL commands only marks that message
for deletion. The actual deletion only happens later (usually two days later).

The KILL EXPUNGE command causes the message to be truly deleted more or less
immediately.

It otherwise is used in the same way as the KILL command.


<sect1>links (0)

<P>
<tt>
<bf>links</bf> Show which nodes are physically connected
</tt>

<P>
This is a quick listing that shows which links are connected and
some information about them. See WHO for a list of all connections.


<sect1>load/aliases (9)

<P>
<tt>
<bf>load/aliases</bf> Reload the command alias table
</tt>

<P>
Reload the /spider/cmd/Aliases file after you have editted it. You will need to
do this if you change this file whilst the cluster is running in order for the
changes to take effect.

<sect1>load/badmsg (9)

<P>
<tt>
<bf>load/badmsg</bf> Reload the bad message table
</tt>

<P>
Reload the /spider/msg/badmsg.pl file if you have changed it manually whilst
the cluster is running. This table contains a number of perl regular 
expressions which are searched for in the fields targetted of each message. 
If any of them match then that message is immediately deleted on receipt. 

<sect1>load/badwords (9)

<P>
<tt>
<bf>load/badwords</bf> Reload the bad words table
</tt>

<P>
Reload the /spider/data/badwords file if you have changed it manually whilst
the cluster is running. This file contains a list of words which, if found
on certain text portions of PC protocol, will cause those protocol frames
to be rejected. It will all put out a message if any of these words are
used on the announce, dx and talk commands. The words can be one or 
more on a line, lines starting with '#' are ignored.

<sect1>load/bands (9)

<P>
<tt>
<bf>load/bands</bf> Reload the band limits table
</tt>

<P>
Reload the /spider/data/bands.pl file if you have changed it manually whilst
the cluster is running. 

<sect1>load/cmd_cache (9)

<P>
<tt>
<bf>load/cmd_cache</bf> Reload the automatic command cache
</tt>

<P>
Normally, if you change a command file in the cmd or local_cmd tree it will
automatially be picked up by the cluster program. Sometimes it can get confused
if you are doing a lot of moving commands about or delete a command in the 
local_cmd tree and want to use the normal one again. Execute this command to
reset everything back to the state it was just after a cluster restart.

<sect1>load/forward (9)

<P>
<tt>
<bf>load/forward</bf> Reload the msg forwarding routing table
</tt>

Reload the /spider/msg/forward.pl file if you have changed it
manually whilst the cluster is running.

<sect1>load/messages (9)

<P>
<tt>
<bf>load/messages</bf> Reload the system messages file
</tt>

<P>
If you change the /spider/perl/Messages file (usually whilst fiddling/writing ne
commands) you can have them take effect during a cluster session by executing this
command. You need to do this if get something like :-

unknown message 'xxxx' in lang 'en'

<sect1>load/prefixes (9)

<P>
<tt>
<bf>load/prefixes</bf> Reload the prefix table
</tt>

<P>
Reload the /spider/data/prefix_data.pl file if you have changed it manually 
whilst the cluster is running. 

<sect1>merge (5)

<P>
<tt>
<bf>merge &lt;node&gt; [&lt;no spots&gt;/&lt;no wwv&gt;]</bf> Ask for the 
latest spots and WWV
</tt>

<P>
MERGE allows you to bring your spot and wwv database up to date. By default
it will request the last 10 spots and 5 WWVs from the node you select. The 
node must be connected locally.

You can request any number of spots or wwv and although they will be appended
to your databases they will not duplicate any that have recently been added 
(the last 2 days for spots and last month for WWV data).

<sect1>msg (9)

<P>
<tt>
<bf>msg &lt;cmd&gt; &lt;msgno&gt; [data ...]</bf> Alter various message 
parameters
</tt>

<P>
Alter message parameters like To, From, Subject, whether private or bulletin
or return receipt (RR) is required or whether to keep this message from timing
out.

<tscreen><verb>
  MSG TO <msgno> <call>     - change TO callsign to <call>
  MSG FRom <msgno> <call>   - change FROM callsign to <call>
  MSG PRrivate <msgno>      - set private flag
  MSG NOPRrivate <msgno>    - unset private flag
  MSG RR <msgno>            - set RR flag
  MSG NORR <msgno>          - unset RR flag
  MSG KEep <msgno>          - set the keep flag (message won't be deleted ever)
  MSG NOKEep <msgno>        - unset the keep flag
  MSG SUbject <msgno> <new> - change the subject to <new>
  MSG WAittime <msgno>      - remove any waitting time for this message
  MSG NOREad <msgno>        - mark message as unread
  MSG REad <msgno>          - mark message as read
  MSG QUeue                 - queue any outstanding bulletins
  MSG QUeue 1               - queue any outstanding private messages
</verb></tscreen>

You can look at the status of a message by using:-

  STAT/MSG &lt;msgno&gt;      

This will display more information on the message than DIR does.

<sect1>pc (8)

<P>
<tt>
<bf>pc &lt;call&gt; &lt;text&gt;</bf> Send text (eg PC Protocol) to &lt;call&gt;
</tt>

<P>
Send some arbitrary text to a locally connected callsign. No processing is done on
the text. This command allows you to send PC Protocol to unstick things if problems
arise (messages get stuck etc). eg:-

   pc gb7djk PC33^GB7TLH^GB7DJK^400^

You can also use in the same way as a talk command to a connected user but
without any processing, added of "from &lt;blah&gt; to &lt;blah&gt;" or whatever.

   pc G1TLH Try doing that properly!!!

<sect1>ping (1)

<P>
<tt>
<bf>ping &lt;node&gt;</bf> Check the link quality between nodes
</tt>

<P>
his command allows you to send a frame to another cluster node on
the network and get a return frame.  The time it takes to do this
is a good indication of the quality of the link.  The actual time
it takes is output to the console in seconds.
Any visible cluster node can be PINGed.


<sect1>rcmd (1)

<P>
<tt>
<bf>rcmd &lt;node call&gt; &lt;cmd&gt;</bf> Send a command to another DX cluster
</tt>

<P>
This command allows you to send nearly any command to another DX Cluster
node that is connected to the system. 

Whether you get any output is dependant on a) whether the other system knows
that the node callsign of this cluster is in fact a node b) whether the
other system is allowing RCMDs from this node and c) whether you have
permission to send this command at all.

<sect1>read (0)

<P>
<tt>
<bf>read</bf> Read the next unread personal message addressed to you<newline>
<bf>read &lt;msgno&gt;</bf> Read the specified message<newline>
</tt>

<P>
You can read any messages that are sent as 'non-personal' and also any
message either sent by or sent to your callsign.


<sect1>read (extended for sysops) (5) 

<P>
<tt>
<bf>read &lt;msgno&gt;</bf> Read a message on the system
</tt>

<P>
As a sysop you may read any message on the system

<sect1>reject/announce

<P>
<tt>
<bf>reject/announce &lsqb;0-9&rsqb; &lt;pattern&gt;</bf> Set a reject filter
for announce
</tt>

<P>
Create an 'reject this announce' line for a filter. 

An reject filter line means that if the announce matches this filter it is
passed onto the user. See HELP FILTERS for more info. Please read this
to understand how filters work - it will save a lot of grief later on.

You can use any of the following things in this line:-

<tscreen><verb>
  info <string>            eg: iota or qsl
  by <prefixes>            eg: G,M,2         
  origin <prefixes>
  origin_dxcc <numbers>    eg: 61,62 (from eg: sh/pre G)
  origin_itu <numbers>
  origin_zone <numbers>
  by_dxcc <numbers>
  by_itu <numbers>
  by_zone <numbers>
  channel <prefixes>
  wx 1                     filter WX announces
  dest <prefixes>          eg: 6MUK,WDX      (distros)
</verb></tscreen>

some examples:-

<tscreen><verb>
  rej/ann by_zone 14,15,16 and not by G,M,2
</verb></tscreen>
 
You can use the tag 'all' to reject everything eg:

<tscreen><verb>
  rej/ann all
</verb></tscreen>

but this probably for advanced users...

<sect1>reject/announce (extended for sysops) (8)

<P>
<tt>
<bf>reject/announce &lt;call&gt; &lsqb;input&rsqb; &lsqb;0-9&rsqb; &lt;pattern&gt;</bf> Announce filter sysop version
</tt>

<P>
This version allows a sysop to set a filter for a callsign as well as the
default for nodes and users eg:-

<tscreen><verb>
  reject/ann by G,M,2
  reject/ann input node_default by G,M,2
  reject/ann user_default by G,M,2
</verb></tscreen>

<sect1>reject/route (8)

<P>
<tt>
<bf>reject/route &lt;call&gt; &lsqb;0-9&rsqb; &lt;pattern&gt;</bf> Set an 'reject' filter line for routing
</tt>

<P>
Create an 'reject this routing PC Protocol' line for a filter. 

<P>
An reject filter line means that if a PC16/17/19/21/24/41/50 matches this filter 
it is NOT passed thru that interface. See HELP FILTERING for more info. Please 
read this to understand how filters work - it will save a lot of grief later on.
You can use any of the following things in this line:-

<tscreen><verb>
  call <prefixes>        the callsign of the thingy
  call_dxcc <numbers>    eg: 61,62 (from eg: sh/pre G)
  call_itu <numbers>
  call_zone <numbers>
  origin <prefixes>      really the interface it came in on
  origin_dxcc <numbers>    eg: 61,62 (from eg: sh/pre G)
  origin_itu <numbers>
  origin_zone <numbers>
</verb></tscreen>

<P>
some examples:-

<tscreen><verb>
  rej/route gb7djk call_dxcc 61,38 (everything except  UK+EIRE nodes)
</verb></tscreen>

<P>
You can use the tag 'all' to reject everything eg:

<tscreen><verb>
  rej/route all     (equiv to [very] restricted mode)
</verb></tscreen>

<sect1>reject/spots (0)

<P>
<tt>
<bf>reject/spots &lsqb;0-9&rsqb; &lt;pattern&gt;</bf> Set a reject filter 
line for spots
</tt>

<P>
Create a 'reject this spot' line for a filter. 

A reject filter line means that if the spot matches this filter it is
dumped (not passed on). See HELP FILTERS for more info. Please read this
to understand how filters work - it will save a lot of grief later on.

You can use any of the following things in this line:-

<tscreen><verb>
  freq <range>           eg: 0/30000 or hf or hf/cw or 6m,4m,2m
  on <range>             same as 'freq'
  call <prefixes>        eg: G,PA,HB9
  info <string>          eg: iota or qsl
  by <prefixes>            
  call_dxcc <numbers>    eg: 61,62 (from eg: sh/pre G)
  call_itu <numbers>
  call_zone <numbers>
  by_dxcc <numbers>
  by_itu <numbers>
  by_zone <numbers>
  origin <prefixes>
  channel <prefixes>
</verb></tscreen>

For frequencies, you can use any of the band names defined in
SHOW/BANDS and you can use a subband name like: cw, rtty, data, ssb -
thus: hf/ssb. You can also just have a simple range like: 0/30000 -
this is more efficient than saying simply: on HF (but don't get
too hung up about that)

some examples:-

<tscreen><verb>
  rej/spot 1 on hf
  rej/spot 2 on vhf and not (by_zone 14,15,16 or call_zone 14,15,16)
</verb></tscreen>

You can use the tag 'all' to reject everything eg:

<tscreen><verb>
  rej/spot 3 all
</verb></tscreen>

but this probably for advanced users...

<sect1>reject/spots (extended for sysops) (8)

<P>
<tt>
<bf>reject/spots &lt;call&gt; &lsqb;input&rsqb; &lsqb;0-9&rsqb; &lt;pattern&gt;</bf>
 Reject spot filter sysop version 
</tt>

<P>
This version allows a sysop to set a filter for a callsign as well as the
default for nodes and users eg:-

<tscreen><verb>
  reject/spot db0sue-7 1 by_zone 14,15,16
  reject/spot node_default all
  set/hops node_default 10

  reject/spot user_default by G,M,2
</verb></tscreen>

<sect1>reject/wcy (0)

<P>
<tt>
<bf>reject/wcy &lsqb;0-9&rsqb; &lt;pattern&gt;</bf> Set a reject WCY filter
</tt>

<P>
It is unlikely that you will want to do this, but if you do then you can
filter on the following fields:-

<tscreen><verb>
  by <prefixes>            eg: G,M,2         
  origin <prefixes>
  origin_dxcc <numbers>    eg: 61,62 (from eg: sh/pre G)
  origin_itu <numbers>
  origin_zone <numbers>
  by_dxcc <numbers>
  by_itu <numbers>
  by_zone <numbers>
  channel <prefixes>
</verb></tscreen>

There are no examples because WCY Broadcasts only come from one place and
you either want them or not (see UNSET/WCY if you don't want them).

This command is really provided for future use.

See HELP FILTER for information.

<sect1>reject/wcy (extended for sysops) (8)

<P>
<tt>
<bf>reject/wcy &lt;call&gt; &lsqb;input&rsqb; &lsqb;0-9&rsqb; &lt;pattern&gt;</bf>
 WCY reject filter sysop version
</tt>

<P>
This version allows a sysop to set a filter for a callsign as well as the
default for nodes and users eg:-

  reject/wcy gb7djk all

<sect1>reject/wwv (0)

<P>
<tt>
<bf>reject/wwv &lsqb;0-9&rsqb; &lt;pattern&gt;</bf> Set a reject WWV filter
</tt>

<P>
It is unlikely that you will want to do this, but if you do then you can
filter on the following fields:-

<tscreen><verb>
  by <prefixes>            eg: G,M,2         
  origin <prefixes>
  origin_dxcc <numbers>    eg: 61,62 (from eg: sh/pre G)
  origin_itu <numbers>
  origin_zone <numbers>
  by_dxcc <numbers>
  by_itu <numbers>
  by_zone <numbers>
  channel <prefixes>
</verb></tscreen>

for example 

<tscreen><verb>
  reject/wwv by_zone 14,15,16
</verb></tscreen>

is probably the only useful thing to do (which will only show WWV broadcasts
by stations in the US).

See HELP FILTER for information.

<sect1>reject/wwv (extended for sysops) (8)

<P>
<tt>
<bf>reject/wwv &lt;call&gt; &lsqb;input&rsqb; &lsqb;0-9&rsqb; &lt;pattern&gt;</bf>
 WWV reject filter sysop version
</tt>

<P>This version allows a sysop to set a filter for a callsign as well as the
default for nodes and users eg:-

<tscreen><verb>
  reject/wwv db0sue-7 1 by_zone 4
  reject/wwv node_default all

  reject/wwv user_default by W
</verb></tscreen>

<sect1>reply (0)

<P>
<tt>
<bf>reply</bf> Reply (privately) to the last message that you have read<newline>
<bf>reply &lt;msgno&gt;</bf> Reply (privately) to the specified message<newline>
<bf>reply B &lt;msgno&gt;</bf> Reply as a Bulletin to the specified message<newline>
<bf>reply NOPrivate &lt;msgno&gt;</bf> Reply as a Bulletin to the specified
message<newline>
<bf>reply RR &lt;msgno&gt;</bf> Reply to the specified message with read 
receipt<newline>
</tt>

<P>
You can reply to a message and the subject will automatically have
"Re:" inserted in front of it, if it isn't already present.

You can also use all the extra qualifiers such as RR, PRIVATE, 
NOPRIVATE, B that you can use with the SEND command (see SEND
for further details)

<sect1>send (0)

<P>
<tt>
<bf>send &lt;call&gt; &lsqb;&lt;call&gt; ...&rsqb;</bf> Send a message to 
one or more callsigns<newline>
<bf>send RR &lt;call&gt;</bf> Send a message and ask for a read receipt<newline>
<bf>send COPY &lt;msgno&gt; &lt;call&gt;</bf> Send a copy of a  message 
to someone<newline>
<bf>send PRIVATE &lt;call&gt;</bf> Send a personal message<newline>
<bf>send NOPRIVATE &lt;call&gt;</bf> Send a message to all stations<newline>
</tt>

<P>
All the SEND commands will create a message which will be sent either to
an individual callsign or to one of the 'bulletin' addresses. 

SEND &lt;call&gt; on its own acts as though you had typed SEND PRIVATE, that is
it will mark the message as personal and send it to the cluster node that
that callsign is connected to.

You can have more than one callsign in all of the SEND commands.

You can have multiple qualifiers so that you can have for example:-

<tscreen><verb>
  SEND RR COPY 123 PRIVATE G1TLH G0RDI
</verb></tscreen>

which should send a copy of message 123 to G1TLH and G0RDI and you will
receive a read receipt when they have read the message.

SB is an alias for SEND NOPRIVATE (or send a bulletin in BBS speak)
SP is an alias for SEND PRIVATE

<sect1>set/address (0)

<P>
<tt>
<bf>set/address &lt;your_address&gt;</bf> Record your postal address
</tt>

<P>
Literally, record your address details on the cluster.

<sect1>set/announce (0)

<P>
<tt>
<bf>set/announce</bf> Allow announce messages
</tt>

<P>
Allow announce messages to arrive at your terminal.

<sect1>set/arcluster (5)

<P>
<tt>
<bf>set/arcluster &lt;node_call&gt; &lsqb;&lt;node_call&gt; ...&rsqb;</bf> Make
the node_call an AR-Cluster type node
</tt>

<P>
Set the node_call as an AR-Cluster type node

<sect1>set/baddx (8)

<P>
<tt>
<bf>set/baddx &lt;call&gt;</bf> Stop words we do not wish to see in the callsign field
of a dx spot being propagated
</tt>

<P>
Setting a word as 'baddx' will prevent spots with that word in the callsign 
field of a DX spot from going any further. They will not be displayed and they 
will not be sent onto other nodes.

The word must be wriiten in full, no wild cards are allowed eg:-

<tscreen><verb>
  set/baddx FORSALE VIDEO FR0G 
</verb></tscreen>

To allow a word again, use the following command ...

<tscreen><verb>
  unset/baddx VIDEO
</verb></tscreen>

<sect1>set/badnode (6)

<P>
<tt>
<bf>set/badnode &lt;node_call&gt;</bf> Stop spots from this node_call
being propagated
</tt>

<P>
Setting a callsign as a 'badnode' will prevent spots from that node 
going any further. They will not be displayed and they will not be 
sent onto other nodes.

The call can be a full or partial call (or a prefix), eg:-

<tscreen><verb>
  set/badnode K1TTT 
</verb></tscreen>

will stop anything from K1TTT (including any SSID's)

<tscreen><verb>
  unset/badnode K1TTT
</verb></tscreen>

will allow spots from him again.

Use with extreme care. This command may well be superceded by FILTERing.

<sect1>set/badspotter (8)

<P>
<tt>
<bf>set/badspotter &lt;call&gt;</bf> Stop spots from this callsign being propagated
</tt>

<P>
Setting a callsign as a 'badspotter' will prevent spots from this callsign 
going any further. They will not be displayed and they will not be 
sent onto other nodes.

The call must be written in full, no wild cards are allowed eg:-

<tscreen><verb>
  set/badspotter VE2STN 
</verb></tscreen>

will stop anything from VE2STN. If you want SSIDs as well then you must
enter them specifically.

<tscreen><verb>
  unset/badspotter VE2STN
</verb></tscreen>

will allow spots from him again.

Use with extreme care. This command may well be superceded by FILTERing.

<sect1>set/badword (8)

<P>
<tt>
<bf>set/badword &lt;word&gt;</bf> Stop things with this word being propogated
</tt>

<P>
Setting a word as a 'badword' will prevent things like spots,
announces or talks with this word in the the text part from going any
further. They will not be displayed and they will not be sent onto
other nodes.

The word must be written in full, no wild cards are allowed eg:-

  set/badword annihilate annihilated annihilation 

will stop anything with these words in the text.

  unset/badword annihilated

will allow text with this word again.


<sect1>set/beep (0)

<P>
<tt>
<bf>set/beep</bf> Add beeps to terminal messages
</tt>

<P>
Add a beep to DX and other terminal messages.

<sect1>set/bbs (5)

<P>
<tt>
<bf>set/bbs &lt;call&gt; &lsqb;&lt;call&gt;..&rsqb;</bf>Make &lt;call&gt; a BBS
</tt>

<sect1>set/clx (5)

<P>
<tt>
<bf>set/clx &lt;node_call&gt; &lsqb;&lt;node_call&gt; ...&rsqb;</bf> Make
the node_call a CLX type node
</tt>

<P>
Set the node_call as a CLX type node

<sect1>set/debug (9)

<P>
<tt>
<bf>set/debug &lt;name&gt;</bf> Add a debug level to the debug set
</tt>

<P>
You can choose to log several different levels.  The levels are

chan
state
msg
cron
connect

You can show what levels you are logging with the <em>show/debug</em>
command.

You can remove a debug level with unset/debug &lt;name&gt;

<sect1>set/dx (0)

<P>
<tt>
<bf>set/dx</bf>Allow DX messages to arrive at your terminal
</tt>

<P>
You can stop DX messages with the <em>unset/dx</em> command

<sect1>set/dxgrid (0)

<P>
<tt>
<bf>set/dxgrid</bf>Allow grid squares on the end of DX messages
</tt>

<P>
Some logging programs do not like the additional information at
the end of a DX spot.  If this is the case, use the <em>unset/dxgrid</em>
command to remove the grid squares.

<sect1>set/dxnet (5)

<P>
<tt>
<bf>set/dxnet &lt;node_call&gt; &lsqb;&lt;node_call&gt; ...&rsqb;</bf> Make
the node_call a DXNet type node
</tt>

<P>
Set the node_call as a DXNet type node

<sect1>set/echo (0)

<P>
<tt>
<bf>set/echo</bf> Make the cluster echo your input
</tt>

<P>
If you are connected via a telnet session, different implimentations
of telnet handle echo differently depending on whether you are 
connected via port 23 or some other port. You can use this command
to change the setting appropriately. 

You can remove the echo with the <em>unset/echo</em> command

The setting is stored in your user profile.

YOU DO NOT NEED TO USE THIS COMMAND IF YOU ARE CONNECTED VIA AX25.

<sect1>set/email (0)

<P>
<tt>
<bf>set/email &lt;email_address&gt;</bf> Set email address(es) and forward your personals
</tt>

<P>
If any personal messages come in for your callsign then you can use
these commands to control whether they are forwarded onto your email
address. To enable the forwarding do something like:-

  SET/EMAIL mike.tubby@somewhere.com

You can have more than one email address (each one separated by a space).
Emails are forwarded to all the email addresses you specify.

You can disable forwarding by:-

  UNSET/EMAIL

<sect1>set/here (0)

<P>
<tt>
<bf>set/here</bf> Set the here flag
</tt>

<P>
Let others on the cluster know you are here by only displaying your
callsign.  If you are away from your terminal you can use the <em>unset/here</em>
command to let people know you are away.  This simply puts brackets
around your callsign to indicate you are not available.

<sect1>set/homenode (0)

<P>
<tt>
<bf>set/homenode &lt;node_call&gt;</bf> Set your home cluster
</tt>

<P>
Tell the cluster system where you normally connect to. Any Messages sent
to you will normally find their way there should you not be connected.
eg:-

<tscreen><verb>
  SET/HOMENODE gb7djk
</verb></tscreen>

<sect1>set/hops (8)

<P>
<tt>
<bf>set/hops &lt;node_call&gt; ann&verbar;spots&verbar;wwv&verbar;wcy &lt;n&gt;</bf>
Set hop count
</tt>

<P>
Set the hop count for a particular type of broadcast for a node.

This command allows you to set up special hop counts for a node 
for currently: announce, spots, wwv and wcy broadcasts.

<tscreen><verb>
eg:
  set/hops gb7djk ann 10
  set/hops gb7mbc spots 20
</verb></tscreen>

Set SHOW/HOPS for information on what is already set. This command
creates a filter and works in conjunction with the filter system. 

<sect1>set/isolate (9)

<P>
<tt>
<bf>set/isolate &lt;node call&gt;</bf> Isolate a node from the rest of the network
</tt>

<P>
Connect a node to your system in such a way that you are a full protocol
member of its network and can see all spots on it, but nothing either leaks
out from it nor goes back into from the rest of the nodes connected to you.

You can potentially connect several nodes in this way.

You can see which nodes are isolated with the show/isolate (1) command.

You can remove the isolation with the command unset/isolate.

<sect1>set/language (0)

<P>
<tt>
<bf>set/language &lt;language&gt;</bf> Set the language you wish to use
</tt>

<P>
You can select the language that you want the cluster to use. Currently
the languages available are <em>en</em> (English) and <em>nl</em> (Dutch).

<sect1>set/location (0)

<P>
<tt>
<bf>set/location &lt;lat and long&gt;</bf> Set your latitude and longitude
</tt>

<P>
You can set your latitude and longitude manually or alternatively use the
<em>set/qra</em> command which will do the conversion for you.

<tscreen><verb>
  set/location 54 04 N 2 02 E
</verb></tscreen>


<sect1>set/sys_location (9)

<P>
<tt>
<bf>set/sys_location &lt;lat & long&gt;</bf> Set your cluster latitude and longitude
</tt>

<P>
In order to get accurate headings and such like you must tell the system
what your latitude and longitude is. If you have not yet done a SET/QRA
then this command will set your QRA locator for you. For example:-

<tscreen><verb>
  SET/LOCATION 52 22 N 0 57 E
</verb></tscreen>

<sect1>set/logininfo (0)

<P>
<tt>
<bf>set/logininfo</bf> Show logins and logouts of nodes and users
</tt>

<P>
Show users and nodes when they log in and out of the local cluster.  You
can stop these messages by using the <em>unset/logininfo</em> command.


<sect1>set/lockout (9)

<P>
<tt>
<bf>set/lockout &lt;call&gt;</bf> Stop a callsign connecting to the cluster
</tt>

<P>
You can show who is locked out with the <em>show/lockout</em> command.
To allow the user to connect again, use the <em>unset/lockout</em> command.

<sect1>set/name (0)

<P>
<tt>
<bf>set/name &lt;your_name&gt;</bf> Set your name
</tt>

<P>
Tell the cluster what your name is, eg:-

<tscreen><verb>
  set/name Dirk
</verb></tscreen>

<sect1>set/node (9)

<P>
<tt>
<bf>set/node &lt;call&gt; [&lt;call&gt; ...]</bf> Make the callsign an AK1A cluster
</tt>

<P>
Tell the system that the call(s) are to be treated as AK1A cluster and
fed PC Protocol rather normal user commands.

From version 1.41 you can also set the following types of cluster

<tscreen><verb>
  set/spider
  set/dxnet
  set/clx
  set/arcluster
</verb></tscreen>

To see what your nodes are set to, use the <em>show/nodes</em> command.

<sect1>set/obscount (9)

<P>
<tt>
<bf>set/obscount &lt;count&gt; &lt;node call&gt;</bf> Set the 'pump-up' 
obsolescence counter
</tt>

<P>
From version 1.35 onwards neighbouring nodes are pinged at regular intervals (see
SET/PINGINTERVAL), usually 300 seconds or 5 minutes. There is a 'pump-up'
counter which is decremented on every outgoing ping and then reset to
the 'obscount' value on every incoming ping. The default value of this
parameter is 2. 

What this means is that a neighbouring node will be pinged twice at 
(default) 300 second intervals and if no reply has been heard just before
what would be the third attempt, that node is disconnected.

If a ping is heard then the obscount is reset to the full value. Using
default values, if a node has not responded to a ping within 15 minutes,
it is disconnected.

<sect1>set/page (0)

<P>
<tt>
<bf>set/page &lt;n&gt;</bf> Set the number of lines per page
</tt>

<P>
Tell the system how many lines you wish on a page when the number of lines
of output from a command is more than this. The default is 20. Setting it
explicitly to 0 will disable paging. 

<tscreen><verb>
  SET/PAGE 30
  SET/PAGE 0
</verb></tscreen>

The setting is stored in your user profile.

<sect1>set/password (0)

<P>
<tt>
<bf>set/password</bf> Set your own password
</tt>

<P>
This command only works for a 'telnet' user (currently). It will
only work if you have a password already set. This initial password
can only be set by the sysop.

When you execute this command it will ask you for your old password,
then ask you to type in your new password twice (to make sure you
get it right). You may or may not see the data echoed on the screen
as you type, depending on the type of telnet client you have.

<sect1>set/password (9)

<P>
<tt>
<bf>set/password &lt;callsign&gt; &lt;string&gt;</bf> Set a users password
</tt>

<P>
The password for a user can only be set by a full sysop. The string
can contain any characters. 

The way this field is used depends on context. If it is being used in
the SYSOP command context then you are offered 5 random numbers and you
have to supply the corresponding letters. This is now mainly for ax25
connections.

If it is being used on incoming telnet connections then, if a password
is set or the:

  set/var $main::passwdreq = 1

command is executed in the startup script, then a password prompt is
given after the normal 'login: ' prompt.  

The command "unset/password" is provided to allow a sysop to remove a
users password completely in case a user forgets or loses their password.

<sect1>set/pinginterval (9)

<P>
<tt><bf>set/pinginterval &lt;time&gt; &lt;node call&gt;</bf> Set the ping time 
to neighbouring nodes
</tt>

<P>
As from version 1.35 all neighbouring nodes are pinged at regular intervals
in order to determine the rolling quality of the link and, in future, to
affect routing decisions. The default interval is 300 secs or 5 minutes.

You can use this command to set a different interval. Please don't. 

But if you do the value you enter is treated as minutes up 60 and seconds
for numbers greater than that.

This is used also to help determine when a link is down at the far end
(as certain cluster software doesn't always notice), see SET/OBSCOUNT
for more information.

<sect1>set/privilege (9)

<P>
<tt>
<bf>set/privilege &lt;n&gt; &lt;call&gt; [&lt;call&gt; ...]</bf> Set the 
privilege level on a call
</tt>

<P>
Set the privilege level on a callsign. The privilege levels that pertain
to commands are as default:-

<tscreen><verb>
  0 - normal user
  1 - allow remote nodes normal user RCMDs
  5 - various privileged commands (including shutdown, but not disc-
      connect), the normal level for another node.
  8 - more privileged commands (including disconnect)
  9 - local sysop privilege. DO NOT SET ANY REMOTE USER OR NODE TO THIS
      LEVEL.
</verb></tscreen>

If you are a sysop and you come in as a normal user on a remote connection
your privilege will automatically be set to 0.

<sect1>set/spider (5)

<P>
<tt>
<bf>set/spider &lt;node_call&gt; &lsqb;&lt;node_call&gt; ...&rsqb;</bf> Make
the node_call a DXSpider type node
</tt>

<P>
Set the node_call as a DXSpider type node

<sect1>set/sys_qra (9)

<P>
<tt>
<bf>set/sys_qra &lt;locator&gt;</bf> Set your cluster QRA locator
</tt>

<sect1>set/qra (0)

<P>
<tt>
<bf>set/qra &lt;locator&gt;</bf> Set your QRA locator
</tt>

<P>
Tell the system what your QRA (or Maidenhead) locator is. If you have not
done a SET/LOCATION then your latitude and longitude will be set roughly
correctly (assuming your locator is correct ;-). For example:-

<tscreen><verb>
  SET/QRA JO02LQ
</verb></tscreen>

<sect1>set/qth (0)

<P>
<tt>
<bf>set/qth &lt;your QTH&gt;</bf> Set your QTH
</tt>

<P>
Tell the system where your are.  For example:-

<tscreen><verb>
  set/qth East Dereham, Norfolk
</verb></tscreen>

<sect1>set/register (9)

<P>
<tt>
<bf>set/register &lt;call&gt;</bf> Mark a user as registered
</tt>

<P>
Registration is a concept that you can switch on by executing the

  set/var $main::regreq = 1 

command (usually in your startup file)

If a user is NOT registered then, firstly, instead of the normal
motd file (/spider/data/motd) being sent to the user at startup, the
user is sent the motd_nor file instead. Secondly, the non registered
user only has READ-ONLY access to the node. The non-registered user
cannot use DX, ANN etc. 

The only exception to this is that a non-registered user can TALK or
SEND messages to the sysop.
 
To unset a user use the 'unset/register' command

<sect1>set/talk (0)

<P>
<tt>
<bf>set/talk</bf> Allow talk messages to be seen at your console
</tt>

<P>
Allow talk messages to arrive at your console.  You can switch off
talks with the <em>unset/talk</em> command.

<sect1>set/wcy (0)

<P>
<tt>
<bf>set/wcy</bf> Allow WCY messages to be seen at your console
</tt>

<P>
Allow WCY information to be seen at your console.  You can switch off
WCY messages with the <em>unset/wcy</em> command.

<sect1>set/wwv (0)

<P>
<tt>
<bf>set/wwv</bf> Allow WWV messages to be seen at your console
</tt>

<P>
Allow WWV information to be seen at your console.  You can switch off
WWV messages with the <em>unset/wwv</em> command.

<sect1>set/wx (0)

<P>
<tt>
<bf>set/wx</bf> Allow WX messages to be seen at your console
</tt>

<P>
Allow WX information to be seen at your console.  You can switch off
WX messages with the <em>unset/wx</em> command.

<sect1>show/baddx (1)

<P>
<tt>
<bf>show/baddx</bf>Show all the bad dx calls in the system
</tt>

<P>
Display all the bad dx callsigns in the system, see SET/BADDX
for more information.

<sect1>show/badnode (6)

<P>
<tt>
<bf>show/badnode</bf> Show all the bad nodes in the system
</tt>

<P>
Display all the bad node callsigns in the system, see SET/BADNODE
for more information.

<sect1>show/badspotter (1)

<P>
<tt>
<bf>show/badspotter</bf> Show all the bad spotters in the system
</tt>

<P>
Display all the bad spotter's callsigns in the system, see SET/BADSPOTTER
for more information.

<sect1>show/badword (1)

<P>
<tt>
<bf>show/badword</bf> Show all the bad words in the system
</tt>

<P>
Display all the bad words in the system, see SET/BADWORD
for more information.

<sect1>show/configuration (0)

<P>
<tt>
<bf>show/configuration &lsqb;&lt;node&gt;&rsqb;</bf> Show all visible nodes and their users
</tt>

<P>
This command allows you to see all the users that can be seen
and the nodes to which they are connected.  With the optional <em>node</em>,
you can specify a particular node to look at.

This command is normally abbreviated to: sh/c

BE WARNED: the list that is returned can be VERY long

<sect1>show/configuration/node (0)

<P>
<tt>
<bf>show/configuration/node</bf> Show all the nodes connected
</tt>

<P>
Show all the nodes connected locally and the nodes they have connected.

<sect1>show/connect (1)

<P>
<tt>
<bf>show/connect</bf> Show all the active connections
</tt>

<P>
This command shows information on all the active connections known to
the node. This command gives slightly more information than WHO.

<sect1>show/date (0)

<P>
<tt>
<bf>show/date &lsqb;&lt;prefix&gt;&verbar;&lt;callsign&gt;&rsqb;</bf> Show
the local time
</tt>

<P>
This is very nearly the same as SHOW/TIME, the only difference the format
of the date string if no arguments are given.

If no prefixes or callsigns are given then this command returns the local
time and UTC as the computer has it right now. If you give some prefixes
then it will show UTC and UTC + the local offset (not including DST) at
the prefixes or callsigns that you specify.

<sect1>show/debug (9)

<P>
<tt>
<bf>show/debug</bf> Show what levels of debug you are logging
</tt>

<P>
The levels can be set with <em>set/debug</em>

<sect1>show/dx (0)

<P>
<tt>
<bf>show/dx &lsqb;options&rsqb;</bf> interrogate the spot database
</tt>

<P>
If you just type SHOW/DX you will get the last so many spots
(sysop configurable, but usually 10).
   
In addition you can add any number of these options in very nearly
any order to the basic SHOW/DX command, they are:-

<tscreen><verb>   
on &lt;band&gt;       - eg 160m 20m 2m 23cm 6mm
on &lt;region&gt;     - eg hf vhf uhf shf      (see SHOW/BANDS)
   
&lt;number&gt;        - the number of spots you want
&lt;from&gt;-&lt;to&gt     - &lt;from&gt; spot no &lt;to&gt; spot no in 
                  the selected list
   
&lt;prefix&gt;        - for a spotted callsign beginning with &lt;prefix&gt;
*&lt;suffix&gt;       - for a spotted callsign ending in &lt;suffix&gt;
*&lt;string&gt;*      - for a spotted callsign containing &lt;string&gt;
   
day &lt;number&gt;    - starting &lt;number&gt; days ago
day &lt;from&gt;-&lt;to&gt; - &lt;from&gt; days &lt;to&gt; days ago
   
info &lt;text&gt;     - any spots containing &lt;text&gt; in the info or remarks
   
by &lt;call&gt;       - any spots spotted by &lt;call&gt; (spotter &lt;call&gt; 
                        is the same).

qsl             - this automatically looks for any qsl info on the call
                  held in the spot database.

iota &lsqb;&lt;iota&gt;&rsqb;   - If the iota island number is missing it will 
                  look for the string iota and anything which looks like 
                  an iota island number. If you specify then it will look 
                  for that island.

qra &lsqb;&lt;locator&gt;&rsqb; - this will look for the specific locator if 
                  you specify one or else anything that looks like a locator.
</verb></tscreen>
   
e.g. 

<tscreen><verb>   
   SH/DX 9m0
   SH/DX on 20m info iota
   SH/DX 9a on vhf day 30
   SH/DX rf1p qsl
   SH/DX iota 
   SH/DX iota eu-064
   SH/DX qra jn86
</verb></tscreen>

<sect1>show/dxcc (0)

<P>
<tt>
<bf>show/dxcc &lt;prefix&gt;</bf> Interrogate the spot database by country
</tt>

<P>
This command takes the &lt;prefix&gt; (which can be a full or partial 
callsign if desired), looks up which internal country number it is
and then displays all the spots as per SH/DX for that country.
   
The options for SHOW/DX also apply to this command.   
e.g. 

<tscreen><verb>   
   SH/DXCC G
   SH/DXCC W on 20m info iota
</verb></tscreen>

<sect1>sh/dxstats (0)

<P>
<tt>
<bf>sh/dxstats</bf> Show the DX Statistics for last 31 days
</tt>

<P>
Show the total DX spots for the last 31 days


<sect1>show/files (0)

<P>
<tt>
<bf>show/files &lsqb;&lt;filearea&gt; &lsqb;&lt;string&gt;&rsqb;&rsqb;</bf> List
the contents of a filearea
</tt>

<P>
SHOW/FILES on its own will show you a list of the various fileareas
available on the system. To see the contents of a particular file
area type:-

<tscreen><verb>
   SH/FILES &lt;filearea&gt;
</verb></tscreen>

where &lt;filearea&gt; is the name of the filearea you want to see the 
contents of.

You can also use shell globbing characters like '*' and '?' in a
string to see a selection of files in a filearea eg:-

<tscreen><verb>
   SH/FILES bulletins arld*
</verb></tscreen>

See also TYPE - to see the contents of a file.

<sect1>show/filter (0)

<P>
<tt>
<bf>show/filter</bf> Show the filters you have set
</tt>

<P>
Show the contents of all the filters that are set by you. This command 
displays all the filters set - for all the various categories.

<sect1>show/filter (extended for sysops) (5)

<P>
<tt>
<bf>show/filter &lt;callsign&gt;</bf> Show the filters set by &lt;callsign&gt;
</tt>

<P>
A sysop can look at any filters that have been set.

<sect1>show/hfstats (0)

<P>
<tt>
<bf>show/hfstats</bf> Show the HF DX Statistics for last 31 days
</tt>

<P>
Show the HF DX spots breakdown by band for the last 31 days

<sect1>show/hftable (0)

<P>
<tt>
<bf>show/hftable</bf> Show the HF DX Spotter Table for your country
</tt>

<P>
Show the HF DX Spotter table for your country for the last 31 days

<sect1>show/hops (8)

<P>
<tt>
<bf>show/hops &lt;node_call&gt; &lsqb;ann&verbar;spots&verbar;wcy&verbar;wwv&verbar;&rsqb;</bf> Show the hop 
counts for a node
</tt>

<P>
This command shows the hop counts set up for a node. You can specify
which category you want to see. If you leave the category out then 
all the categories will be listed.

<sect1>show/isolate (1)

<P>
<tt>
<bf>show/isolate</bf> Show a list of isolated nodes
</tt>

<P>
Show which nodes are currently set to be isolated.

<sect1>show/lockout (9)

<P>
<tt>
<bf>show/lockout</bf> Show a list of excluded callsigns
</tt>

<P>
Show a list of callsigns that have been excluded (locked out) of the
cluster locally with the <em>set/lockout</em> command

<sect1>show/log (8)

<P>
<tt>
<bf>show/log &lsqb;&lt;callsign&gt;&rsqb;</bf> Show excerpts from the system log
</tt>

<P>
This command outputs a short section of the system log.  On its own
it will output a general logfile.  With the optional callsign it will
show output from the log associated with that callsign.

<sect1>show/moon (0)

<P>
<tt>
<bf>show/moon &lsqb;&lt;prefix&gt;&verbar;&lt;callsign&gt;&rsqb;</bf> Show moon
rise and set times
</tt>

<P>
Show the Moon rise and set times for a (list of) prefixes or callsigns, 
together with the azimuth and elevation of the sun currently at those
locations.

If you don't specify any prefixes or callsigns, it will show the times for
your QTH (assuming you have set it with either SET/LOCATION or SET/QRA),
together with the current azimuth and elevation.

In addition, it will show the gain or loss dB relative to the nominal 
distance of 385,000Km due to the ellipsoidal nature of the orbit.

If all else fails it will show the Moonrise and set times for the node
that you are connected to. 

For example:-

<tscreen><verb>
  SH/MOON
  SH/MOON G1TLH W5UN
</verb></tscreen>

<sect1>show/muf (0)

<P>
<tt>
<bf>show/muf &lt;prefix&gt; &lsqb;&lt;hours&gt;&rsqb;&lsqb;long&rsqb;</bf> Show
the likely propagation to &lt;prefix&gt;
</tt>

<P>
This command allow you to estimate the likelihood of you contacting
a station with the prefix you have specified. The output assumes a modest
power of 20dBW and receiver sensitivity of -123dBm (about 0.15muV/10dB SINAD)

The result predicts the most likely operating frequencies and signal
levels for high frequency (shortwave) radio propagation paths on
specified days of the year and hours of the day. It is most useful for
paths between 250 km and 6000 km, but can be used with reduced accuracy
for paths shorter or longer than this.

The command uses a routine MINIMUF 3.5 developed by the U.S. Navy and
used to predict the MUF given the predicted flux, day of the year,
hour of the day and geographic coordinates of the transmitter and
receiver. This routine is reasonably accurate for the purposes here,
with a claimed RMS error of 3.8 MHz, but much smaller and less complex
than the programs used by major shortwave broadcasting organizations,
such as the Voice of America.

The command will display some header information detailing its
assumptions, together with the locations, latitude and longitudes and
bearings. It will then show UTC (UT), local time at the other end
(LT), calculate the MUFs, Sun zenith angle at the midpoint of the path
(Zen) and the likely signal strengths. Then for each frequency for which
the system thinks there is a likelihood of a circuit it prints a value.

The value is currently a likely S meter reading based on the conventional
6dB / S point scale. If the value has a '+' appended it means that it is
1/2 an S point stronger. If the value is preceeded by an 'm' it means that
there is likely to be much fading and by an 's' that the signal is likely
to be noisy.  

By default SHOW/MUF will show the next two hours worth of data. You
can specify anything up to 24 hours worth of data by appending the no of
hours required after the prefix. For example:-

<tscreen><verb>
  SH/MUF W
</verb></tscreen>

produces:

<tscreen><verb>
  RxSens: -123 dBM SFI: 159   R: 193   Month: 10   Day: 21
  Power :   20 dBW    Distance:  6283 km    Delay: 22.4 ms
  Location                       Lat / Long           Azim
  East Dereham, Norfolk          52 41 N 0 57 E         47
  United-States-W                43 0 N 87 54 W        299
  UT LT  MUF Zen  1.8  3.5  7.0 10.1 14.0 18.1 21.0 24.9 28.0 50.0
  18 23 11.5 -35  mS0+ mS2   S3
  19  0 11.2 -41  mS0+ mS2   S3
</verb></tscreen>

indicating that you will have weak, fading circuits on top band and 
80m but usable signals on 40m (about S3).

inputting:-

<tscreen><verb>
  SH/MUF W 24
</verb></tscreen>

will get you the above display, but with the next 24 hours worth of
propagation data.

<tscreen><verb>
  SH/MUF W L 24
  SH/MUF W 24 Long
</verb></tscreen>

Gives you an estimate of the long path propagation characterics. It
should be noted that the figures will probably not be very useful, nor
terrible accurate, but it is included for completeness.

<sect1>show/newconfiguration (0)

<P>
<tt>
<bf>show/newconfiguration &lsqb;&lt;node&gt;&rsqb;</bf> Show all the nodes and users visible
</tt>

<P>
This command allows you to see all the users that can be seen
and the nodes to which they are connected. 

This command produces essentially the same information as 
SHOW/CONFIGURATION except that it shows all the duplication of
any routes that might be present It also uses a different format
which may not take up quite as much space if you don't have any
loops.

BE WARNED: the list that is returned can be VERY long

<sect1>show/newconfiguration/node (0)

<P>
<tt>
<bf>show/newconfiguration/node</bf> Show all the nodes connected locally
</tt>

<P>
Show all the nodes connected to this node in the new format.

<sect1>show/node (1)

<P>
<tt>
<bf>show/node &lsqb;&lt;node_call&gt; ...&rsqb;</bf> Show the type and version
number of nodes
</tt>

<P>
Show the type and version (if connected) of the nodes specified on the
command line. If no callsigns are specified then a sorted list of all
the non-user callsigns known to the system will be displayed.

<sect1>show/prefix (0)

<P>
<tt>
<bf>show/prefix &lt;callsign&gt;</bf> Interrogate the prefix database
</tt>

<P>
This command takes the &lt;callsign&gt; (which can be a full or partial 
callsign or a prefix), looks up which internal country number 
it is and then displays all the relevant prefixes for that country
together with the internal country no, the CQ and ITU regions. 

See also SHOW/DXCC


<sect1>show/program (5)

<P>
<tt>
<bf>show/program</bf> Show the locations of all the included program modules
</tt>

<P>
Show the name and location where every program module was load from. This
is useful for checking where you think you have loaded a .pm file from.

<sect1>show/qra (0)

<P>
<tt>
<bf>show/qra &lt;locator&gt &lsqb;&lt;locator&gt;&rsqb;</bf> Show the distance
between locators<newline>
<bf>show/qra &lt;lat&gt; &lt;long&gt;</bf> Convert latitude and longitude to 
a locator
</tt>

<P>
This is a multipurpose command that allows you either to calculate the
distance and bearing between two locators or (if only one locator is
given on the command line) the distance and beraing from your station
to the locator. For example:-

<tscreen><verb>
SH/QRA IO92QL 
SH/QRA JN06 IN73
</verb></tscreen>

The first example will show the distance and bearing to the locator from
yourself, the second example will calculate the distance and bearing from
the first locator to the second. You can use 4 or 6 character locators.

It is also possible to convert a latitude and longitude to a locator by 
using this command with a latitude and longitude as an argument, for
example:-

<tscreen><verb>
SH/QRA 52 41 N 0 58 E
</verb></tscreen>

<sect1>show/qrz (0)

<P>
<tt>
<bf>show/qrz &lt;callsign&gt;</bf> Show any callbook details on a callsign
</tt>

<P>
This command queries the QRZ callbook server on the internet
and returns any information available for that callsign. This service
is provided for users of this software by http://www.qrz.com 

<sect1>show/registered (9)

<P>
<tt>
<bf>show/registered &lsqb;&lt;prefix&gt;&lsqb;</bf> Show the registered users
</tt>

<sect1>show/route (0)

<P>
<tt>
<bf>show/route &lt;callsign&gt;</bf> Show the route to &lt;callsign&gt;
</tt>

<P>
This command allows you to see to which node the callsigns specified are
connected. It is a sort of inverse sh/config.

<tscreen><verb>
  sh/route n2tly
</verb></tscreen>

<sect1>show/satellite (0)

<P>
<tt>
<bf>show/satellite &lt;name&gt; &lsqb;&lt;hours&gt; &lt;interval&gt;&rsqb;</bf>
Show satellite tracking data
</tt>

<P>
Show the tracking data from your location to the satellite of your choice
from now on for the next few hours.

If you use this command without a satellite name it will display a list
of all the satellites known currently to the system. 

If you give a name then you can obtain tracking data of all the passes
that start and finish 5 degrees below the horizon. As default it will
give information for the next three hours for every five minute period.

You can alter the number of hours and the step size, within certain 
limits. 

Each pass in a period is separated with a row of '-----' characters

So for example:-

<tscreen><verb>
SH/SAT AO-10 
SH/SAT FENGYUN1 12 2
</verb></tscreen>

<sect1>show/sun (0)

<P>
<tt>
<bf>show/sun &lsqb;&lt;prefix&gt;&verbar;&lt;callsign&gt;&rsqb;</bf> Show
sun rise and set times
</tt>

<P>
Show the sun rise and set times for a (list of) prefixes or callsigns, 
together with the azimuth and elevation of the sun currently at those
locations.

If you don't specify any prefixes or callsigns, it will show the times for
your QTH (assuming you have set it with either SET/LOCATION or SET/QRA),
together with the current azimuth and elevation.

If all else fails it will show the sunrise and set times for the node
that you are connected to. 

For example:-

<tscreen><verb>
  SH/SUN
  SH/SUN G1TLH K9CW ZS
</verb></tscreen>

<sect1>show/time (0)

<P>
<tt>
<bf>show/time &lsqb;&lt;prefix&gt;&verbar;&lt;callsign&gt;&rsqb;</bf> Show
the local time
</tt>

<P>
If no prefixes or callsigns are given then this command returns the local
time and UTC as the computer has it right now. If you give some prefixes
then it will show UTC and UTC + the local offset (not including DST) at
the prefixes or callsigns that you specify.

<sect1>show/vhfstats (0)

<P>
<tt>
<bf>show/vhfstats</bf> Show the VHF DX Statistics for last 31 days
</tt>

<P>
Show the VHF DX spots breakdown by band for the last 31 days

<sect1>show/vhftable (0)

<P>
<tt>
<bf>show/vhftable</bf> Show the VHF DX Spotter Table for your country
</tt>

<P>
Show the VHF DX Spotter table for your country for the last 31 days

<sect1>show/wcy (0)

<P>
<tt>
<bf>show/wcy</bf> Show the last 10 WCY broadcasts<newline>
<bf>show/wcy &lt;n&gt;</bf> Show the last &lt;n&gt; WCY broadcasts
</tt>

<P>
Display the most recent WCY information that has been received by the system

<sect1>show/wwv (0)

<P>
<tt>
<bf>show/wwv</bf> Show the last 10 WWV broadcasts<newline>
<bf>show/wwv &lt;n&gt;</bf> Show the last &lt;n&gt; WWV broadcasts
</tt>

<P>
Display the most recent WWV information that has been received by the system


<sect1>shutdown (5)

<P>
<tt>
<bf>shutdown</bf> Shutdown the cluster
</tt>

<P>
Shutdown the cluster and disconnect all the users.  If you have Spider
set to respawn in /etc/inittab it will of course restart.

<sect1>spoof (9)

<P>
<tt>
<bf>spoof &lt;callsign&gt; &lt;command&gt;</bf> Run commands as another user
</tt>

<P>
This is a very simple yet powerful command for the sysop.  It allows you to
issue commands as if you were a different user.  This is very useful for the
kind of things that users seem to always get wrong.. like home_node for
example.

<sect1>stat/db (5)

<P>
<tt>
<bf>stat/db &lt;dbname&gt;</bf> Show the status of a database
</tt>

<P>
Show the internal status of a database descriptor.

Depending on your privilege level you will see more or less information. 
This command is unlikely to be of much use to anyone other than a sysop.

<sect1>stat/channel (5)

<P>
<tt>
<bf>stat/channel &lt;callsign&gt;</bf> Show the status of a channel on the cluster
</tt>

<P>
Show the internal status of the channel object either for the channel that 
you are on or else for the callsign that you asked for.

Only the fields that are defined (in perl term) will be displayed.

<sect1>stat/msg (5)

<P>
<tt>
<bf>stat/msg &lt;msgno&gt;</bf> Show the status of a message
</tt>

<P>
This command shows the internal status of a message and includes information
such as to whom it has been forwarded, its size, origin etc etc.

<P>
If no message number is given then the status of the message system is 
displayed.

<sect1>stat/route_node (5)

<P>
<tt>
<bf>stat/route_node &lt;callsign&gt;</bf> Show the data in a Route::Node object
</tt>

<sect1>stat/route_user (5)

<P>
<tt>
<bf>stat/route_user &lt;callsign&gt;</bf> Show the data in a Route::User object
</tt>

<sect1>stat/user (5)

<P>
<tt>
<bf>stat/user &lt;callsign&gt;</bf> Show the full status of a user
</tt>

<P>
Shows the full contents of a user record including all the secret flags
and stuff.

Only the fields that are defined (in perl term) will be displayed.

<sect1>sysop (0)

<P>
<tt>
<bf>sysop</bf> Regain your privileges if you login remotely
</tt>

<P>
The system automatically reduces your privilege level to that of a
normal user if you login in remotely. This command allows you to
regain your normal privilege level. It uses the normal system: five
numbers are returned that are indexes into the character array that is
your assigned password (see SET/PASSWORD). The indexes start from
zero.

You are expected to return a string which contains the characters
required in the correct order. You may intersperse those characters
with others to obscure your reply for any watchers. For example (and
these values are for explanation :-):

<tscreen><verb>
  password = 012345678901234567890123456789
  > sysop
  22 10 15 17 3
</verb></tscreen>

you type:-

<tscreen><verb>
 aa2bbbb0ccc5ddd7xxx3n
 or 2 0 5 7 3
 or 20573
</verb></tscreen>

They will all match. If there is no password you will still be offered
numbers but nothing will happen when you input a string. Any match is
case sensitive.

<sect1>talk (0)

<P>
<tt>
<bf>talk &lt;callsign&gt;</bf> Enter talk mode with &lt;callsign&gt;<newline>
<bf>talk &lt;callsign&gt; &lt;text&gt;</bf> Send a text message to &lt;callsign&gt;<newline>
<bf>talk &lt;callsign&gt; &gt; &lt;node_call&gt; &lsqb;&lt;text&gt;&rsqb;</bf>
Send a text message to &lt;callsign&gt; via &lt;node_call&gt;
</tt>

<P>
Send a short message to any other station that is visible on the cluster
system. You can send it to anyone you can see with a SHOW/CONFIGURATION 
command, they don't have to be connected locally.

The second form of TALK is used when other cluster nodes are connected
with restricted information. This usually means that they don't send 
the user information usually associated with logging on and off the cluster.

If you know that G3JNB is likely to be present on GB7TLH, but you can only
see GB7TLH in the SH/C list but with no users, then you would use the
second form of the talk message.

If you want to have a ragchew with someone you can leave the text message
out and the system will go into 'Talk' mode. What this means is that a
short message is sent to the recipient telling them that you are in a 'Talking' 
frame of mind and then you just type - everything you send will go to the 
station that you asked for. 

All the usual announcements, spots and so on will still come out on your
terminal.

If you want to do something (such as send a spot) you precede the normal 
command with a '/' character, eg:-

<tscreen><verb>
   /DX 14001 G1TLH What's a B class licensee doing on 20m CW?
   /HELP talk
</verb></tscreen>

To leave talk mode type:
   
<tscreen><verb>
   /EX
</verb></tscreen>

<sect1>type (0)

<P>
<tt>
<bf>type &lt;filearea&gt;/&lt;name&gt;</bf> Look at a file in one of the fileareas
</tt>

<P>
Type out the contents of a file in a filearea. So, for example, in 
filearea 'bulletins' you want to look at file 'arld051' you would 
enter:-

<tscreen><verb>
   TYPE bulletins/arld051
</verb></tscreen>

See also SHOW/FILES to see what fileareas are available and a 
list of content.

<sect1>who (0)

<P>
<tt>
<bf>who</bf> Show who is physically connected locally
</tt>

<P>
This is a quick listing that shows which callsigns are connected and
what sort of connection they have

<sect1>wx (0)

<P>
<tt>
<bf>wx &lt;text&gt;</bf> Send a weather message to local users<newline>
<bf>wx full &lt;text&gt; </bf> Send a weather message to all cluster users
</tt>

<P>
Weather messages can sometimes be useful if you are experiencing an extreme
that may indicate enhanced conditions

<sect1>wx (enhanced for sysops) (5)

<P>
<tt>
<bf>wx sysop &lt;text&gt;</bf> Send a weather message to other clusters only
</tt>

<P>
Send a weather message only to other cluster nodes and not to general users.



</article>
